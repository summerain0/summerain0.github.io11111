{"meta":{"title":"summerain0的个人博客","subtitle":"","description":"summerain0的个人博客","author":"summerain0","url":"https://summerain0.club","root":"/"},"pages":[{"title":"","date":"2025-01-02T06:10:55.741Z","updated":"2025-01-02T06:10:55.741Z","comments":true,"path":"404.html","permalink":"https://summerain0.club/404","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2025-01-02T06:10:55.743Z","updated":"2025-01-02T06:10:55.743Z","comments":true,"path":"about/index.html","permalink":"https://summerain0.club/about/","excerpt":"","text":"欢迎About Me欢迎光临summerain0的个人小站，如你所见，这是一个博客网站，主要分享一些教程及个人遇到的问题及解决方法，希望对大家能有所帮助。 男 出不了校的苦逼大学生 日常码代码 啥都写一点，Android，JavaWeb，Vue.js …"},{"title":"留言板","date":"2025-01-02T06:10:55.777Z","updated":"2025-01-02T06:10:55.777Z","comments":true,"path":"comment/index.html","permalink":"https://summerain0.club/comment/","excerpt":"","text":"Hello，来聊点什么呢？"},{"title":"所有分类","date":"2025-01-02T06:10:55.777Z","updated":"2025-01-02T06:10:55.777Z","comments":true,"path":"categories/index.html","permalink":"https://summerain0.club/categories/","excerpt":"","text":""},{"title":"友情链接","date":"2025-01-02T06:10:55.778Z","updated":"2025-01-02T06:10:55.778Z","comments":true,"path":"friends/index.html","permalink":"https://summerain0.club/friends/","excerpt":"","text":""},{"title":"所有标签","date":"2025-01-02T06:10:55.778Z","updated":"2025-01-02T06:10:55.778Z","comments":true,"path":"tags/index.html","permalink":"https://summerain0.club/tags/","excerpt":"","text":""},{"title":"小工具","date":"2025-01-02T06:10:55.778Z","updated":"2025-01-02T06:10:55.778Z","comments":true,"path":"tools/index.html","permalink":"https://summerain0.club/tools/","excerpt":"","text":"Jetpack Compose Vector转ImageVector"},{"title":"","date":"2025-01-02T06:10:55.772Z","updated":"2025-01-02T06:10:55.772Z","comments":true,"path":"assets/lib/moment.min.js","permalink":"https://summerain0.club/assets/lib/moment.min.js","excerpt":"","text":"!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){\"use strict\";var H;function f(){return H.apply(null,arguments)}function a(e){return e instanceof Array||\"[object Array]\"===Object.prototype.toString.call(e)}function F(e){return null!=e&&\"[object Object]\"===Object.prototype.toString.call(e)}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function L(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;for(var t in e)if(c(e,t))return;return 1}function o(e){return void 0===e}function u(e){return\"number\"==typeof e||\"[object Number]\"===Object.prototype.toString.call(e)}function V(e){return e instanceof Date||\"[object Date]\"===Object.prototype.toString.call(e)}function G(e,t){for(var n=[],s=e.length,i=0;i>0,s=0;s"},{"title":"","date":"2025-01-02T06:10:55.772Z","updated":"2025-01-02T06:10:55.772Z","comments":true,"path":"assets/tools/vector2compose/index.js","permalink":"https://summerain0.club/assets/tools/vector2compose/index.js","excerpt":"","text":"const example = ` ` const template = `val %iconName1%: ImageVector get() { if (_%iconName2% != null) { return _%iconName2%!! } _%iconName2% = ImageVector.Builder( name = \"%iconName1%\", defaultWidth = %defaultWidth%.dp, defaultHeight = %defaultHeight%.dp, viewportWidth = %viewportWidth%f, viewportHeight = %viewportHeight%f, autoMirror = false )%result%.build() return _%iconName2%!! } private var _%iconName2%: ImageVector? = null` const textPadding = \" \" const iconNameField = document.getElementById(\"iconNameField\") const rawTextarea = document.getElementById(\"rawText\") const targetTextarea = document.getElementById(\"targetText\") const conversionButton = document.getElementById(\"conversionBtn\") const clearButton = document.getElementById(\"clearBtn\") const copyButton = document.getElementById(\"copyBtn\") const exegesisSwitch = document.getElementById(\"exegesisSwitch\") window.onload = function () { rawTextarea.value = example } conversionButton.onclick = function () { const rawText = rawTextarea.value.trim() if (rawText.length === 0) { mdui.snackbar({ message: '请输入文本' }); return } const parser = new DOMParser() let doc = parser.parseFromString(rawText, \"application/xml\"); // 检查合法性 if (doc.querySelector('html') !== null) { mdui.snackbar({ message: '待处理文本不合法！' }); return } // 检查画布大小 const vector = doc.querySelector('vector') const viewportWidth = vector.attributes['android:viewportWidth'].value const viewportHeight = vector.attributes['android:viewportHeight'].value const defaultWidth = vector.attributes['android:width'].value.replaceAll(\"dp\", \"\") const defaultHeight = vector.attributes['android:height'].value.replaceAll(\"dp\", \"\") const paths = vector.querySelectorAll('path') let result = \"\" paths.forEach(function (path) { const pathData = path.attributes['android:pathData'].value if (pathData === null) { mdui.snackbar({ message: '没获取到pathData！' }); return } let patchText = `.path( fill = SolidColor(Color.Black), fillAlpha = 1f, stroke = null, strokeAlpha = 1f, strokeLineWidth = 1f, strokeLineCap = StrokeCap.Butt, strokeLineJoin = StrokeJoin.Bevel, strokeLineMiter = 1f, pathFillType = PathFillType.NonZero ) {\\n` const commands = parseSVGPath(pathData) patchText += convertToPathBuilder(commands) patchText += \" }\" result += patchText }) // icon名字 const iconName1 = iconNameField.value if (iconName1.trim().length === 0) { mdui.snackbar({ message: '请输入图标名称！' }); return } const iconName2 = iconName1.substring(0, 1).toLowerCase() + iconName1.substring(1, iconName1.length) // path内容 targetTextarea.value = template .replace(\"%result%\", result) .replaceAll(\"%iconName1%\", iconName1) .replaceAll(\"%iconName2%\", iconName2) .replaceAll(\"%defaultWidth%\", defaultWidth) .replaceAll(\"%defaultHeight%\", defaultHeight) .replaceAll(\"%viewportWidth%\", viewportWidth) .replaceAll(\"%viewportHeight%\", viewportHeight) } clearButton.onclick = function () { rawTextarea.value = \"\" targetTextarea.value = \"\" } copyButton.onclick = function () { navigator.clipboard.writeText(targetTextarea.value.trim()).then( () => { mdui.snackbar({ message: '复制成功' }); }, () => { mdui.snackbar({ message: '复制失败' }); } ); } function parseSVGPath(pathString) { let commands = []; let currentCommand = ''; for (let i = 0; i < pathString.length; i++) { let char = pathString[i]; if (char.match(/[a-zA-Z]/)) { // 如果遇到字母，则当前操作结束，将当前操作及其参数保存到数组中 if (currentCommand !== '') { commands.push(currentCommand.split(' ')); } currentCommand = char; } else if (char.match(/[0-9.-]/)) { // 如果是数字或减号，则将其添加到当前操作的参数中 let startIndex = i; while (i + 1 < pathString.length && pathString[i + 1].match(/[0-9.-]/)) { i++; } let parameter = pathString.substring(startIndex, i + 1); currentCommand += ' ' + parameter; } } // 将最后一个操作及其参数添加到数组中 if (currentCommand !== '') { commands.push(currentCommand.split(' ')); } return commands; } // 根据操作符生成文本 function convertToPathBuilder(commands) { let pathBuilder = \"\"; for (let i = 0; i < commands.length; i++) { let command = commands[i][0]; let params = commands[i].slice(1).map(Number); switch (command) { case \"M\": pathBuilder += `${textPadding}moveTo(${params[0]}f, ${params[1]}f)\\n`; break; case \"m\": pathBuilder += `${textPadding}moveToRelative(${params[0]}f, ${params[1]}f)\\n`; break; case \"L\": // 参数可能包含多个，所以需要循环绘制多条线段 for (let index = 0; index < params.length; index += 2) { pathBuilder += `${textPadding}lineTo(${params[index]}f, ${params[index + 1]}f)\\n`; } break; case \"l\": // 参数可能包含多个，所以需要循环绘制多条线段 for (let index = 0; index < params.length; index += 2) { pathBuilder += `${textPadding}lineToRelative(${params[index]}f, ${params[index + 1]}f)\\n`; } break; case \"H\": pathBuilder += `${textPadding}horizontalLineTo(${params[0]}f)\\n`; break; case \"h\": pathBuilder += `${textPadding}horizontalLineToRelative(${params[0]}f)\\n`; break; case \"V\": pathBuilder += `${textPadding}verticalLineTo(${params[0]}f)\\n`; break; case \"v\": pathBuilder += `${textPadding}verticalLineToRelative(${params[0]}f)\\n`; break; case \"C\": // 参数可能包含多个，所以需要循环绘制多条线段 for (let index = 0; index < params.length; index += 6) { pathBuilder += `${textPadding}curveTo(${params[index]}f, ${params[index + 1]}f, ${params[index + 2]}f, ${params[index + 3]}f, ${params[index + 4]}f, ${params[index + 5]}f)\\n`; } break; case \"c\": for (let index = 0; index < params.length; index += 6) { pathBuilder += `${textPadding}curveToRelative(${params[index]}f, ${params[index + 1]}f, ${params[index + 2]}f, ${params[index + 3]}f, ${params[index + 4]}f, ${params[index + 5]}f)\\n`; } break; case \"A\": pathBuilder += `${textPadding}arcTo(${params[0]}f, ${params[1]}f, ${params[2]}f, ${params[3] == '1'}, ${params[4] == '1'}, ${params[5]}f, ${params[6]}f)\\n`; break; case \"a\": pathBuilder += `${textPadding}arcToRelative(${params[0]}f, ${params[1]}f, ${params[2]}f, ${params[3] == '1'}, ${params[4] == '1'}, ${params[5]}f, ${params[6]}f)\\n`; break; case \"S\": pathBuilder += `${textPadding}reflectiveCurveTo(${params[0]}f, ${params[1]}f, ${params[2]}f, ${params[3]}f)\\n`; break; case \"s\": pathBuilder += `${textPadding}reflectiveCurveToRelative(${params[0]}f, ${params[1]}f, ${params[2]}f, ${params[3]}f)\\n`; break; case \"Z\": case \"z\": pathBuilder += textPadding + \"close()\\n\"; break; default: pathBuilder += `${textPadding}[未知的操作符${command}]${params}\\n` break; } } return pathBuilder; }"},{"title":"","date":"2025-01-02T06:10:55.748Z","updated":"2025-01-02T06:10:55.748Z","comments":true,"path":"assets/code-sources/plane-war/js/main.js","permalink":"https://summerain0.club/assets/code-sources/plane-war/js/main.js","excerpt":"","text":"// 画布 const game = new Phaser.Game(360, 600, Phaser.AUTO, 'game'); // 状态 game.states = {}; // 全局音乐播放标识 let isBGMPlay = true; // 无敌模式 let invincibleMode = false; // 舞台放大倍数 let multipleX = 1, multipleY = 1; // 素材库 const sourcesList = { background: \"background\", startButton: \"startButton\", startBGM: \"startBackgroundMusic\", playBGM: \"playBackgroundMusic\", gameOverMusic: \"gameOverMusic\", beAttackedMusic: \"beAttackedMusic\", playerExplodeMusic: \"playerBeAttackedMusic\", getAwardMusic: \"getAwardMusic\", myShot: \"myShot\", myPlane: \"myPlane\", myBullet: \"myBullet\", myExplode: \"myExplode\", enemyBullet: \"enemyBullet\", enemy1: \"enemy1\", enemy2: \"enemy2\", enemy3: \"enemy3\", enemyExplode1: \"enemyExplode1\", enemyExplode2: \"enemyExplode2\", enemyExplode3: \"enemyExplode3\", boss: \"boss\", bossExplode: \"bossExplode\", startMusicButton: \"startBackgroundMusic\", stopMusicButton: \"stopBackgroundMusic\", killAward: \"killAward\", lifeAward: \"lifeAward\", levelAward: \"levelAward\", menuButtonAudio: \"menuButtonAudio\", startButtonAudio: \"startButtonAudio\", replayButton: \"replayButton\", shareButton: \"shareButton\" }; // 敌人配置 const enemyTeam = { enemy1: { game: this,// 游戏对象 selfPic: sourcesList.enemy1, // 敌人图片 bulletPic: sourcesList.enemyBullet, // 敌人子弹 explodePic: sourcesList.enemyExplode1, // 敌人死亡动画 selfPool: 10, // 敌人对象池数量 bulletPool: 50, // 敌人子弹对象池数量 explodePool: 10, // 敌人死亡对象池数量 life: 1, // 敌人生命值 velocity: 100, // 敌人移动速度 bulletX: 7.5, // 敌人子弹X轴偏移 bulletY: 20, // 敌人子弹Y轴偏移 bulletVelocity: 200, // 敌人子弹速度 selfTimeInterval: 3000, // 敌人生成频率 bulletTimeInterval: 2000, // 敌人子弹生成频率 investigationRadius: 200,// 侦查半径 score: 10, // 击杀获得分数 crashSound: this.enemyExplodeSound // 敌人死亡音效 }, enemy2: { game: this,// 游戏对象 selfPic: sourcesList.enemy2, // 敌人图片 bulletPic: sourcesList.enemyBullet, // 敌人子弹 explodePic: sourcesList.enemyExplode2, // 敌人死亡动画 selfPool: 10, // 敌人对象池数量 bulletPool: 50, // 敌人子弹对象池数量 explodePool: 10, // 敌人死亡对象池数量 life: 5, // 敌人生命值 velocity: 125, // 敌人移动速度 bulletX: 13, // 敌人子弹X轴偏移 bulletY: 30, // 敌人子弹Y轴偏移 bulletVelocity: 200, // 敌人子弹速度 selfTimeInterval: 3500, // 敌人生成频率 bulletTimeInterval: 1500, // 敌人子弹生成频率 investigationRadius: 260,// 侦查半径 score: 15, // 击杀获得分数 crashSound: this.enemyExplodeSound // 敌人死亡音效 }, enemy3: { game: this,// 游戏对象 selfPic: sourcesList.enemy3, // 敌人图片 bulletPic: sourcesList.enemyBullet, // 敌人子弹 explodePic: sourcesList.enemyExplode3, // 敌人死亡动画 selfPool: 10, // 敌人对象池数量 bulletPool: 50, // 敌人子弹对象池数量 explodePool: 10, // 敌人死亡对象池数量 life: 10, // 敌人生命值 velocity: 50, // 敌人移动速度 bulletX: 15.5, // 敌人子弹X轴偏移 bulletY: 50, // 敌人子弹Y轴偏移 bulletVelocity: 200, // 敌人子弹速度 selfTimeInterval: 5000, // 敌人生成频率 3500ms bulletTimeInterval: 1200, // 敌人子弹生成频率 investigationRadius: 360,// 侦查半径 score: 30, // 击杀获得分数 crashSound: this.enemyExplodeSound // 敌人死亡音效 } }; // 奖励配置 const awardTeam = { level: { // 升级 selfPic: sourcesList.levelAward, type: \"level\", velocity: 75 }, life: { // 加生命 selfPic: sourcesList.lifeAward, type: \"life\", velocity: 50 }, kill: { // 全屏秒杀 selfPic: sourcesList.killAward, type: \"kill\", velocity: 100 } }; // 玩家配置初始化 const playerConfig = { game: this,// 对象 selfPic: sourcesList.myPlane, // 贴图 bulletPic: sourcesList.myBullet, // 子弹 explodePic: sourcesList.myExplode, // 死亡动画 life: 10, // 生命值 level: 5, // 等级 shield: 100, // 护盾 bulletVelocity: 200, // 子弹速度 bulletTimeInterval: 1500, // 子弹生成频率 bulletCount: 1 // 子弹条数 } // 最终分数 let endScore = 0; /** * 主页面 */ game.states.preload = function () { this.preload = function () { /******************************* 图片素材部分 ***************************/ game.load.image(sourcesList.background, \"assets/image/bg.png\"); // 背景图 game.load.image(sourcesList.startMusicButton, \"assets/image/startMusic.png\"); // 播放音乐按钮 game.load.image(sourcesList.stopMusicButton, \"assets/image/stopMusic.png\"); // 暂停播放音乐按钮 game.load.spritesheet(sourcesList.startButton, \"assets/image/startButton.png\", 100, 40, 2); // 开始按钮 game.load.spritesheet(sourcesList.replayButton, \"assets/image/replayButton.png\", 80, 30, 2) // 重来按钮 game.load.spritesheet(sourcesList.shareButton, \"assets/image/shareButton.png\", 80, 30, 2) // 分享按钮 game.load.spritesheet(sourcesList.myPlane, \"assets/image/myPlane.png\", 32, 40, 4); // 玩家飞机 game.load.image(sourcesList.myBullet, \"assets/image/myBullet.png\"); // 子弹 game.load.spritesheet(sourcesList.myExplode, \"assets/image/myExplode.png\", 32, 40, 4) // 玩家飞机死亡 game.load.image(sourcesList.enemyBullet, \"assets/image/bullet.png\"); // 敌人子弹 game.load.image(sourcesList.enemy1, \"assets/image/enemy1.png\"); // 敌人1 game.load.image(sourcesList.enemy2, \"assets/image/enemy2.png\"); // 敌人2 game.load.image(sourcesList.enemy3, \"assets/image/enemy3.png\"); // 敌人3 game.load.spritesheet(sourcesList.enemyExplode1, \"assets/image/explode1.png\", 20, 20, 4) // 敌人1飞机死亡 game.load.spritesheet(sourcesList.enemyExplode2, \"assets/image/explode2.png\", 30, 30, 4) // 敌人2飞机死亡 game.load.spritesheet(sourcesList.enemyExplode3, \"assets/image/explode3.png\", 32, 50, 6) // 敌人3飞机死亡 game.load.spritesheet(sourcesList.boss, \"assets/image/boss.png\", 47, 75, 2) // Boss飞机 game.load.spritesheet(sourcesList.bossExplode, \"assets/image/boss_explode.png\", 48, 75, 6) // Boss飞机死亡 game.load.image(sourcesList.killAward, \"assets/image/award_kill.png\"); // 全屏秒杀 game.load.image(sourcesList.lifeAward, \"assets/image/award_life.png\"); // 加生命 game.load.image(sourcesList.levelAward, \"assets/image/award_level.png\"); // 加等级 /******************************* 音效部分 ***************************/ game.load.audio(sourcesList.startBGM, \"assets/music/bgm.mp3\"); // 开始背景音乐 game.load.audio(sourcesList.playBGM, 'assets/music/playback.mp3'); // 游玩背景音乐 game.load.audio(sourcesList.menuButtonAudio, 'assets/music/button1.mp3'); // 菜单点击按钮音效 game.load.audio(sourcesList.startButtonAudio, 'assets/music/button.mp3'); // 开始按钮点击音效 game.load.audio(sourcesList.gameOverMusic, 'assets/music/gameOver.mp3'); // 游戏结束音乐 game.load.audio(sourcesList.beAttackedMusic, 'assets/music/ao.mp3'); // 被击中音效 game.load.audio(sourcesList.playerExplodeMusic, 'assets/music/explode.mp3'); // 死亡音乐 game.load.audio(sourcesList.getAwardMusic, 'assets/music/getAward.mp3'); // 获得奖励音乐 game.load.audio(sourcesList.myShot, 'assets/music/myShot.ogg'); // 玩家发射子弹的声音 game.load.audio(sourcesList.bossExplode, 'assets/music/bossExplode.wav'); // 玩家发射子弹的声音 }; this.create = function () { // 全屏 this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT; // 记录倍数 multipleX = document.body.clientWidth / game.width; multipleY = document.body.clientHeight / game.height; // 滚动背景 const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); bg.autoScroll(0, 60); // 飞机 this.myplane = game.add.sprite(157, 150, sourcesList.myPlane); this.myplane.animations.add(\"fly\"); this.myplane.animations.play(\"fly\", 14, true); // 14帧可循环动画 // 背景音乐 this.backgroundMusicPlayer = game.add.audio(sourcesList.startBGM, 0.2, true); if (isBGMPlay) this.backgroundMusicPlayer.play(); // 开始按钮 日常状态，按下时，松开时 this.startButton = game.add.button(125, 330, sourcesList.startButton, this.StartClick, this, 1, 1, 0); const style = {font: \"12px 宋体\", fill: \"#ff0000\"}; this.OPtext = game.add.text(125, 400, \"点我体验无敌模式\", style); this.OPtext.inputEnabled = true; this.OPtext.events.onInputDown.add(function () { invincibleMode = true; alert(\"已开启，请点击开始按钮\") }); // 暂停按钮 this.stopMusicButton = game.add.button(335, 10, sourcesList.stopMusicButton, function () { if (this.backgroundMusicPlayer.isPlaying) { isBGMPlay = false; this.backgroundMusicPlayer.stop(); } }, this, 0, 0, 0); // 播放按钮 this.startMusicButton = game.add.button(310, 10, sourcesList.startMusicButton, function () { if (!this.backgroundMusicPlayer.isPlaying) { isBGMPlay = true; this.backgroundMusicPlayer.play(); } }, this, 0, 0, 0); }; // 开始按钮事件，跳转到讲解页面 this.StartClick = function () { game.add.audio(sourcesList.menuButtonAudio, 1, false).play(); this.backgroundMusicPlayer.stop(); game.state.start(\"help\"); }; } // 游戏讲解镜头 game.states.help = function () { this.create = function () { // 滚动背景 const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); bg.autoScroll(0, 60); // 玩家飞机 this.myplane = game.add.sprite(80, 135, sourcesList.myPlane); this.myplane.animations.add(\"fly\"); this.myplane.animations.play(\"fly\", 14, true); // 14帧可循环动画 const style = {font: \"12px 宋体\", fill: \"#ff0000\"}; game.add.text(125, 150, \"玩家飞机,初始生命为10,等级为5\", style); // 奖励 game.add.sprite(80, 175, sourcesList.killAward); game.add.text(125, 185, \"获得后清除所有可见敌人\", style); game.add.sprite(85, 210, sourcesList.lifeAward); game.add.text(125, 220, \"获得后随机增加生命或护盾\", style); game.add.sprite(85, 250, sourcesList.levelAward); game.add.text(125, 260, \"获得后等级+1\", style); game.add.text(50, 320, \"★玩家与敌人碰撞或每10个敌人逃脱均会减少生命\\n进入Boss关卡时判定区域为飞机中间的红点\", style); // 开始按钮 this.startButton = game.add.button(125, 430, sourcesList.startButton, this.StartClick, this, 1, 1, 0); }; this.StartClick = function () { game.add.audio(sourcesList.startButtonAudio, 1, false).play(); game.state.start(\"main\"); }; }; // 主游戏镜头 game.states.main = function () { // 数据提示文字 let dataText; // 字体样式 const mainTextStyle = {font: \"12px 宋体\", fill: \"#ff0000\"}; // 手指按下时坐标 let mDownX = 0, mDownY = 0; // 触摸状态 解决Move先于Down执行问题 let isTouching = false; // 玩家实体 let playerObj; let determinePoint; let playerX = 0; let playerY = 0; // 玩家分数 let score = 0; let disScore = 100; // 敌人逃脱个数 let escapedEnemyCount = 0; let escapedEnemyCountCache = 10; // 敌人对象 let enemy1Obj; let enemy2Obj; let enemy3Obj; // 奖励 let awardObj; // Boss状态标识 let isBossStatus = false; let disBossTime = 30000; // 护盾回复缓存 let shieldCache = 0; // Boss实体 let bossObj; this.create = function () { const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); bg.autoScroll(0, 60); // 背景音乐 this.playBGM = game.add.audio(sourcesList.playBGM, 0.2, true); if (isBGMPlay) this.playBGM.play(); // 数据初始化 score = 0; isBossStatus = false; shieldCache = game.time.now + 1000; disBossTime = game.time.now + 30000; // 创建玩家实体 playerObj = new Player(); playerObj.init(); // 判定点 determinePoint = game.add.graphics(0, 0); determinePoint.beginFill(0xFF0000, 1); determinePoint.drawCircle(0, 0, 5); game.physics.arcade.enable(determinePoint); // 敌人实例化 enemy1Obj = new Enemy(enemyTeam.enemy1, this); enemy2Obj = new Enemy(enemyTeam.enemy2, this); enemy3Obj = new Enemy(enemyTeam.enemy3, this); enemy1Obj.init(this); enemy2Obj.init(this); enemy3Obj.init(this); // 奖励实例化 awardObj = new Award(awardTeam, this); awardObj.init(); // Boss实例化 bossObj = new Boss(this); // 数据面板 dataText = game.add.text(5, 5, \"\", mainTextStyle); // 监听事件 game.input.onDown.add(function (event) { mDownX = event.pageX / multipleX; mDownY = event.pageY / multipleY; playerX = playerObj.myPlane.x; playerY = playerObj.myPlane.y; isTouching = true; }); game.input.onUp.add(function () { mDownX = -1; mDownY = -1; playerX = playerObj.myPlane.x; playerY = playerObj.myPlane.y; isTouching = false; }); game.input.addMoveCallback(this.mouseMoveHandler, this) } this.update = function () { playerObj.shoot(); // 更新判断点位置 determinePoint.x = playerObj.myPlane.x + 17; determinePoint.y = playerObj.myPlane.y + 20; // Boss生成检测 !isBossState保证不会多个boss同框 if (!isBossStatus && game.time.now >= disBossTime) { bossObj.createBoss(); } if (isBossStatus) { game.physics.arcade.overlap(playerObj.bulletGroup, bossObj.bossPlane, bossObj.hitBoss, null, this); game.physics.arcade.overlap(determinePoint, bossObj.bossBulletGroup, playerObj.hitMyPlane, null, this); bossObj.lateralMove(); bossObj.update(); } // 敌人生成 if (!isBossStatus) { enemy1Obj.createEnemy(); enemy2Obj.createEnemy(); enemy3Obj.createEnemy(); if (score >= 10000) { enemy1Obj.nearPlayer(); enemy2Obj.nearPlayer(); enemy3Obj.nearPlayer(); } enemy1Obj.enemyShoot(); enemy2Obj.enemyShoot(); enemy3Obj.enemyShoot(); } // 奖励机制 if (score >= disScore) { disScore += 100; awardObj.createAward(); } // 回复护盾 if (game.time.now >= shieldCache) { if (playerObj.shield < 100) playerObj.shield++; shieldCache += 1000; } if (!isBossStatus) { // Boss状态停止检测 game.physics.arcade.overlap(playerObj.bulletGroup, enemy1Obj.enemyGroup, enemy1Obj.hitEnemy, null, this); game.physics.arcade.overlap(playerObj.bulletGroup, enemy2Obj.enemyGroup, enemy2Obj.hitEnemy, null, this); game.physics.arcade.overlap(playerObj.bulletGroup, enemy3Obj.enemyGroup, enemy3Obj.hitEnemy, null, this); game.physics.arcade.overlap(playerObj.myPlane, enemy1Obj.enemyBulletGroup, playerObj.hitMyPlane, null, this); game.physics.arcade.overlap(playerObj.myPlane, enemy2Obj.enemyBulletGroup, playerObj.hitMyPlane, null, this); game.physics.arcade.overlap(playerObj.myPlane, enemy3Obj.enemyBulletGroup, playerObj.hitMyPlane, null, this); game.physics.arcade.overlap(playerObj.myPlane, enemy1Obj.enemyGroup, playerObj.hitEnemy, null, this); game.physics.arcade.overlap(playerObj.myPlane, enemy2Obj.enemyGroup, playerObj.hitEnemy, null, this); game.physics.arcade.overlap(playerObj.myPlane, enemy3Obj.enemyGroup, playerObj.hitEnemy, null, this); } game.physics.arcade.overlap(playerObj.myPlane, awardObj.awardLevelGroup, awardObj.getLevelAward, null, this); game.physics.arcade.overlap(playerObj.myPlane, awardObj.awardLifeGroup, awardObj.getLifeAward, null, this); game.physics.arcade.overlap(playerObj.myPlane, awardObj.awardKillGroup, awardObj.getKillAward, null, this); // Boss倒计时 let time = disBossTime !== 0 && !isBossStatus ? (disBossTime - game.time.now) / 1000 : 0; dataText.setText( \"分数：\" + score + \"\\n生命：\" + playerObj.life + \"\\n等级：\" + playerObj.level + \"\\n护盾：\" + playerObj.shield + \"\\nBoss倒计时：\" + time + \"s\" + \"\\n敌人逃脱个数：\" + escapedEnemyCount ); } // 滑动事件 this.mouseMoveHandler = function (event) { if (isTouching) { let mTouchX = event.pageX / multipleX; let mTouchY = event.pageY / multipleY; let x = playerX + mTouchX - mDownX; let y = playerY + mTouchY - mDownY; playerObj.myPlane.x = x; playerObj.myPlane.y = y; } } // 结束游戏 this.gotoOver = function () { this.playBGM.stop() endScore = score; game.state.start(\"end\"); } // 获取玩家实体 this.getPlayerObject = function () { return playerObj; } this.setScore = function (s) { score = s; } this.getScore = function () { return score; } this.setEscapedEnemyCount = function (count) { escapedEnemyCount = count; } this.getEscapedEnemyCount = function () { return escapedEnemyCount } this.setEscapedEnemyCountCache = function (count) { escapedEnemyCountCache = count; } this.getEscapedEnemyCountCache = function () { return escapedEnemyCountCache } this.getEnemy = function () { return [enemy1Obj, enemy2Obj, enemy3Obj]; } this.setBossStatus = function (status) { isBossStatus = status; disBossTime = game.time.now + 60000; } this.getBossStatus = function () { return isBossStatus; } this.getBossObj = function () { return bossObj; } }; // 结束镜头 game.states.end = function () { this.create = function () { var bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); bg.autoScroll(0, 30); // 音乐 this.gameover = game.add.audio(sourcesList.gameOverMusic, 1, false); this.gameover.play(); // 飞机 this.myplane = game.add.sprite(157, 150, playerConfig.selfPic); this.myplane.animations.add(\"fly\"); this.myplane.animations.play(\"fly\", 14, true); // 14帧可循环动画 // 分数 var style = {font: \"40px 宋体\", fill: \"#ff0000\"}; this.text = game.add.text(400, 230, endScore, style); this.text.x = 170 - this.text.width / 2; // 分享和重来按钮 this.shareButton = game.add.button(60, 350, sourcesList.shareButton, this.share, this, 0, 0, 1); this.replayButton = game.add.button(200, 350, sourcesList.replayButton, this.replay, this, 0, 0, 1); }; this.replay = function () { isBossState = false; game.add.audio(sourcesList.startButtonAudio, 1, false).play(); game.state.start(\"main\"); }; this.share = function () { game.add.audio(sourcesList.startButtonAudio, 1, false).play(); document.getElementById(\"shareImg\").style.display = 'block'; }; }; // 场景注册 game.state.add(\"preload\", game.states.preload); game.state.add(\"help\", game.states.help); game.state.add(\"main\", game.states.main); game.state.add(\"end\", game.states.end); game.state.start(\"preload\"); /*********************************************** 实体类 ***********************************************/ // 玩家飞机类 function Player() { let self = this; this.init = function () { // 初始化玩家数据 this.level = playerConfig.level; this.life = playerConfig.life; this.shield = playerConfig.shield; this.bulletVelocity = playerConfig.bulletVelocity; this.bulletTimeInterval = playerConfig.bulletTimeInterval; this.bulletCount = playerConfig.bulletCount; if (invincibleMode) { this.level = 99999; this.life = 99999; this.shield = 999999; } // 玩家飞机部分 this.myPlane = game.add.sprite(160, 520, playerConfig.selfPic); this.myPlane.animations.add(\"fly\"); this.myPlane.animations.play(\"fly\", 14, true); // 14帧可循环动画 game.physics.arcade.enable(this.myPlane); this.myPlane.body.collideWorldBounds = true this.setPlaneLevel(this.level); // 玩家子弹对象池 this.bulletGroup = game.add.group(); this.bulletGroup.enableBody = true; this.bulletGroup.createMultiple(500, playerConfig.bulletPic); this.bulletGroup.setAll(\"outOfBoundsKill\", true); this.bulletGroup.setAll(\"checkWorldBounds\", true); } // 自身发射子弹逻辑 this.shoot = function () { game.add.audio(sourcesList.myShot, 0.05, false).play(); if ((this.bulletTime || 0) < game.time.now) { let bullet = this.bulletGroup.getFirstExists(false); if (bullet) { bullet.reset(this.myPlane.x + 14, this.myPlane.y - 12); bullet.body.velocity.x = 0; bullet.body.velocity.y = -this.bulletVelocity; this.bulletTime = game.time.now + this.bulletTimeInterval; } if (this.bulletCount === 3) { // 子弹条数为3时发射旁边两条子弹 bullet = this.bulletGroup.getFirstExists(false); if (bullet) { bullet.reset(this.myPlane.x + 3, this.myPlane.y - 1); bullet.body.velocity.x = 0; bullet.body.velocity.y = -this.bulletVelocity; } bullet = this.bulletGroup.getFirstExists(false); if (bullet) { bullet.reset(this.myPlane.x + 23, this.myPlane.y - 1); bullet.body.velocity.x = 0; bullet.body.velocity.y = -this.bulletVelocity; } } } }; // 被击中逻辑 this.hitMyPlane = function (plane, bullet) { bullet.kill(); // 降低飞机等级 最低1级 if (self.level > 1) { self.setPlaneLevel(self.level - 1); } // 降低飞机生命值 if (self.shield > 0) { let num = self.shield >= 10 ? 10 : self.shield; self.shield -= num; return; } if (self.life > 1) { self.life--; game.add.audio(sourcesList.beAttackedMusic, 2, false).play(); return; } // 玩家死亡 self.myexplode = game.add.sprite(plane.x, plane.y, sourcesList.myExplode); const anim = self.myexplode.animations.add(playerConfig.explodePic); self.myexplode.animations.play(playerConfig.explodePic, 14, false, true); anim.onComplete.add(this.gotoOver, this) game.add.audio(sourcesList.myExplode, 0.2, false); plane.kill(); // 清除实体 } // 与敌机相撞 this.hitEnemy = function (plane, enemy) { enemy.kill(); if (self.shield > 0) { self.shield = 0; } else { self.life--; } if (self.life"},{"title":"","date":"2025-01-02T06:10:55.755Z","updated":"2025-01-02T06:10:55.755Z","comments":true,"path":"assets/code-sources/plane-war/js/phaser.min.js","permalink":"https://summerain0.club/assets/code-sources/plane-war/js/phaser.min.js","excerpt":"","text":"/* Phaser v2.6.2 - http://phaser.io - @photonstorm - (c) 2016 Photon Storm Ltd. */ !function(a){if(\"object\"==typeof exports)module.exports=a();else if(\"function\"==typeof define,1){var b;\"undefined\"!=typeof window?b=window:\"undefined\"!=typeof global?b=global:\"undefined\"!=typeof self&&(b=self),b.p2=a()}else define(a)}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i=\"function\"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error(\"Cannot find module '\"+g+\"'\")}var j=c[g]={exports:{}};b[g][0].call(j.exports,function(a){var c=b[g][1][a];return e(c?c:a)},j,j.exports,a,b,c,d)}return c[g].exports}for(var f=\"function\"==typeof require&&require,g=0;g=0&&i=0&&j0},d.leftOn=function(a,b,c){return d.area(a,b,c)>=0},d.right=function(a,b,c){return d.area(a,b,c)"},{"title":"","date":"2025-01-02T06:10:55.751Z","updated":"2025-01-02T06:10:55.751Z","comments":true,"path":"assets/code-sources/plane-war/js/phaser.js","permalink":"https://summerain0.club/assets/code-sources/plane-war/js/phaser.js","excerpt":"","text":"/* Phaser v2.6.2 - http://phaser.io - @photonstorm - (c) 2016 Photon Storm Ltd. */ !function(a){if(\"object\"==typeof exports)module.exports=a();else if(\"function\"==typeof define,1){var b;\"undefined\"!=typeof window?b=window:\"undefined\"!=typeof global?b=global:\"undefined\"!=typeof self&&(b=self),b.p2=a()}else define(a)}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i=\"function\"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error(\"Cannot find module '\"+g+\"'\")}var j=c[g]={exports:{}};b[g][0].call(j.exports,function(a){var c=b[g][1][a];return e(c?c:a)},j,j.exports,a,b,c,d)}return c[g].exports}for(var f=\"function\"==typeof require&&require,g=0;g=0&&i=0&&j0},d.leftOn=function(a,b,c){return d.area(a,b,c)>=0},d.right=function(a,b,c){return d.area(a,b,c)"}],"posts":[{"title":"从零在Docker中搭建微服务环境(docker for windows)","slug":"从零在Docker中搭建微服务环境-docker-for-windows","date":"2024-01-18T08:17:01.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2024/01/18/从零在Docker中搭建微服务环境-docker-for-windows/","permalink":"https://summerain0.club/2024/01/18/%E4%BB%8E%E9%9B%B6%E5%9C%A8Docker%E4%B8%AD%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83-docker-for-windows/","excerpt":"","text":"1. 前言本文将在Docker环境中搭建微服务环境，包含以下几个环境，均为当前最新版(2024-1-17)： MySQL 8 Redis Nacos Sentinel Seata 2.3.0 2. 环境搭建2.1 建立子网未指定容器ip的情况下，docker会按启动顺序分配ip，所以可能每次启动微服务环境的时候，各容器的ip并不一致，所以需要自己建立一个子网，并分配给各个容器 初始状态下，docker有三个网络： 12345PS C:\\Users\\23516&gt; docker network lsNETWORK ID NAME DRIVER SCOPEd71b4e8082bd bridge bridge localcfe60e5ede6f host host localeca3acb024ef none null local 此处我们建立一个自己的网络，名字为myNetwork，网段是172.20.0.0/16，可以分配172.20.0.0 ~ 172.20.255.255 1docker network create --subnet=172.20.0.0/16 myNetwork 再次检查Docker网络列表，发现已经成功创建了自己的网络 123456PS C:\\Users\\23516&gt; docker network lsNETWORK ID NAME DRIVER SCOPEd71b4e8082bd bridge bridge localcfe60e5ede6f host host locale49ab5c335a4 myNetwork bridge localeca3acb024ef none null local 既然我们已经成功创建自己的网络，所以我们需要提前分配一下每个容器的ip，可以列一个表格： 容器 IP MySQL 172.20.0.2 Redis 172.20.0.3 Nacos 172.20.0.4 Sentinel 172.20.0.5 Seata 172.20.0.6 2.2 MySQLMYSQL_ROOT_PASSWORD: MySQL的密码，用户名默认为root 1docker run -itd --name MySQL --network myNetwork --ip 172.20.0.2 -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -p 33060:33060 mysql 执行后我们成功创建了一个容器名为MySQL，分配了ip并且将3306和33060端口暴露出来 当然这还没完，使用select NOW()查询后会发现时间差了8个小时，也就是存在时区问题，所以我们需要修改MySQL的时区 进入MySQL容器，理论上容器是不存在my.cnf这个文件的，所以直接执行以下命令即可。如果存在，则修改相应字段即可。 1echo -e &quot;[mysqld]\\ndefault-time-zone = &#x27;+8:00&#x27;&quot; &gt; /etc/mysql/my.cnf 执行完毕后重启MySQL容器，再次执行select NOW()即可发现时间显示正常。 2.3 RedisRedis部分就很简单，只分配一个ip即可，没什么特殊的操作 1docker run -itd --name Redis --network myNetwork --ip 172.20.0.3 -p 6379:6379 redis 2.4 NacosNacos &#x2F;nɑ:kəʊs&#x2F; 是 Dynamic Naming and Configuration Service的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 MODE: 运行模式，我们选择单机模式(standalone) Nacos 2.0之后需要额外暴露9848和9849端口 1docker run -itd --name Nacos --network myNetwork --ip 172.20.0.4 -e MODE=standalone -p 8848:8848 -p 9848:9848 -p 9849:9849 nacos/nacos-server 现在就可以访问localhost:8848/nacos进入Nacos的后台管理页面了，用户名和密码默认都是nacos Nacos后台管理页面.png 2.5 Sentinel什么是Sentinel？https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D Sentinel的搭建也是非常的简单，执行这条命令即可创建 1docker run -itd --name Sentinel --network myNetwork --ip 172.20.0.5 -p 8858:8858 bladex/sentinel-dashboard 现在就可以访问localhost:8858进入Sentinel的后台管理页面了，用户名和密码默认都是sentinel Sentinel后台管理页面.png 2.6 Seata恭喜你，到了最后的一步，也是最难搭建的分布式事务容器，这里有一些坑是需要去踩的 2.6.1 创建容器首先，你需要先查一下自己所处的局域网ip，例如我在当前的局域网中的IP是192.168.10.254，这个ip建议在路由器后台中定死。 1234567891011121314151617181920PS C:\\Users\\23516&gt; ipconfigWindows IP 配置以太网适配器 以太网: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . :无线局域网适配器 WLAN: 连接特定的 DNS 后缀 . . . . . . . : IPv6 地址 . . . . . . . . . . . . : 2409:8a34:61e:15f4:731b:41fe:57a8:a797 临时 IPv6 地址. . . . . . . . . . : 2409:8a34:61e:15f4:b44e:b797:dd16:3dcb 本地链接 IPv6 地址. . . . . . . . : fe80::ca09:8ecc:8470:a83a%13 IPv4 地址 . . . . . . . . . . . . : 192.168.10.254 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : fe80::10%13 192.168.10.1 接下来创建Seata容器，成功创建后，立马停止Seata容器，我们需要进行一些配置 这里的SEATA_IP一定一定一定要和宿主机的局域网IP一致，也就是上面提到的(192.168.10.254)，不然后面项目链接Seata服务器的时候会一直报错！ 1docker run -itd --name Seata --network myNetwork --ip 172.20.0.6 -e SEATA_IP=192.168.10.254 -p 8091:8091 -p 7091:7091 seataio/seata-server 2.6.2 创建seata数据库然后我们现在需要创建供Seata回滚事务使用的数据库，数据库名为seata(当然也可以自定义)，建表语句可以参见官方地址 点击展开查看建表语句 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273-- -------------------------------- The script used when storeMode is &#x27;db&#x27; ---------------------------------- the table to store GlobalSession dataCREATE TABLE IF NOT EXISTS `global_table`( `xid` VARCHAR(128) NOT NULL, `transaction_id` BIGINT, `status` TINYINT NOT NULL, `application_id` VARCHAR(32), `transaction_service_group` VARCHAR(32), `transaction_name` VARCHAR(128), `timeout` INT, `begin_time` BIGINT, `application_data` VARCHAR(2000), `gmt_create` DATETIME, `gmt_modified` DATETIME, PRIMARY KEY (`xid`), KEY `idx_status_gmt_modified` (`status` , `gmt_modified`), KEY `idx_transaction_id` (`transaction_id`)) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4;-- the table to store BranchSession dataCREATE TABLE IF NOT EXISTS `branch_table`( `branch_id` BIGINT NOT NULL, `xid` VARCHAR(128) NOT NULL, `transaction_id` BIGINT, `resource_group_id` VARCHAR(32), `resource_id` VARCHAR(256), `branch_type` VARCHAR(8), `status` TINYINT, `client_id` VARCHAR(64), `application_data` VARCHAR(2000), `gmt_create` DATETIME(6), `gmt_modified` DATETIME(6), PRIMARY KEY (`branch_id`), KEY `idx_xid` (`xid`)) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4;-- the table to store lock dataCREATE TABLE IF NOT EXISTS `lock_table`( `row_key` VARCHAR(128) NOT NULL, `xid` VARCHAR(128), `transaction_id` BIGINT, `branch_id` BIGINT NOT NULL, `resource_id` VARCHAR(256), `table_name` VARCHAR(32), `pk` VARCHAR(36), `status` TINYINT NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;0:locked ,1:rollbacking&#x27;, `gmt_create` DATETIME, `gmt_modified` DATETIME, PRIMARY KEY (`row_key`), KEY `idx_status` (`status`), KEY `idx_branch_id` (`branch_id`), KEY `idx_xid` (`xid`)) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4;CREATE TABLE IF NOT EXISTS `distributed_lock`( `lock_key` CHAR(20) NOT NULL, `lock_value` VARCHAR(20) NOT NULL, `expire` BIGINT, primary key (`lock_key`)) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4;INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;AsyncCommitting&#x27;, &#x27; &#x27;, 0);INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;RetryCommitting&#x27;, &#x27; &#x27;, 0);INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;RetryRollbacking&#x27;, &#x27; &#x27;, 0);INSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES (&#x27;TxTimeoutCheck&#x27;, &#x27; &#x27;, 0); 2.6.3 在Nacos中导入Seata的配置我们的Seata的配置是从Nacos获取的，所以我们需要事先在Nacos上配置好Seata的相关参数 点击Nacos的配置列表，选择创建配置 选择创建配置 这里填写Data-ID和Group，填入相关的配置信息(如果提示有语法错误，请无视) 填入配置 同样，配置内容可以参见官方提供的config.txt，也可以复制下面的 点击展开查看 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152#For details about configuration items, see https://seata.apache.org/zh-cn/docs/user/configurations#Transport configuration, for client and servertransport.type=TCPtransport.server=NIOtransport.heartbeat=truetransport.enableTmClientBatchSendRequest=falsetransport.enableRmClientBatchSendRequest=truetransport.enableTcServerBatchSendResponse=falsetransport.rpcRmRequestTimeout=30000transport.rpcTmRequestTimeout=30000transport.rpcTcRequestTimeout=30000transport.threadFactory.bossThreadPrefix=NettyBosstransport.threadFactory.workerThreadPrefix=NettyServerNIOWorkertransport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandlertransport.threadFactory.shareBossWorker=falsetransport.threadFactory.clientSelectorThreadPrefix=NettyClientSelectortransport.threadFactory.clientSelectorThreadSize=1transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThreadtransport.threadFactory.bossThreadSize=1transport.threadFactory.workerThreadSize=defaulttransport.shutdown.wait=3transport.serialization=seatatransport.compressor=none#Transaction routing rules configuration, only for the clientservice.vgroupMapping.default_tx_group=default#If you use a registry, you can ignore itservice.default.grouplist=127.0.0.1:8091service.enableDegrade=falseservice.disableGlobalTransaction=falseclient.metadataMaxAgeMs=30000#Transaction rule configuration, only for the clientclient.rm.asyncCommitBufferLimit=10000client.rm.lock.retryInterval=10client.rm.lock.retryTimes=30client.rm.lock.retryPolicyBranchRollbackOnConflict=trueclient.rm.reportRetryCount=5client.rm.tableMetaCheckEnable=trueclient.rm.tableMetaCheckerInterval=60000client.rm.sqlParserType=druidclient.rm.reportSuccessEnable=falseclient.rm.sagaBranchRegisterEnable=falseclient.rm.sagaJsonParser=fastjsonclient.rm.tccActionInterceptorOrder=-2147482648client.tm.commitRetryCount=5client.tm.rollbackRetryCount=5client.tm.defaultGlobalTransactionTimeout=60000client.tm.degradeCheck=falseclient.tm.degradeCheckAllowTimes=10client.tm.degradeCheckPeriod=2000client.tm.interceptorOrder=-2147482648client.undo.dataValidation=trueclient.undo.logSerialization=jacksonclient.undo.onlyCareUpdateColumns=trueserver.undo.logSaveDays=7server.undo.logDeletePeriod=86400000client.undo.logTable=undo_logclient.undo.compress.enable=trueclient.undo.compress.type=zipclient.undo.compress.threshold=64k#For TCC transaction modetcc.fence.logTableName=tcc_fence_logtcc.fence.cleanPeriod=1h# You can choose from the following options: fastjson, jackson, gsontcc.contextJsonParserType=fastjson#Log rule configuration, for client and serverlog.exceptionRate=100#Transaction storage configuration, only for the server. The file, db, and redis configuration values are optional.store.mode=filestore.lock.mode=filestore.session.mode=file#Used for password encryptionstore.publicKey=#If `store.mode,store.lock.mode,store.session.mode` are not equal to `file`, you can remove the configuration block.store.file.dir=file_store/datastore.file.maxBranchSessionSize=16384store.file.maxGlobalSessionSize=512store.file.fileWriteBufferCacheSize=16384store.file.flushDiskMode=asyncstore.file.sessionReloadReadSize=100#These configurations are required if the `store mode` is `db`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `db`, you can remove the configuration block.store.db.datasource=druidstore.db.dbType=mysqlstore.db.driverClassName=com.mysql.jdbc.Driverstore.db.url=jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=truestore.db.user=usernamestore.db.password=passwordstore.db.minConn=5store.db.maxConn=30store.db.globalTable=global_tablestore.db.branchTable=branch_tablestore.db.distributedLockTable=distributed_lockstore.db.queryLimit=100store.db.lockTable=lock_tablestore.db.maxWait=5000#These configurations are required if the `store mode` is `redis`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `redis`, you can remove the configuration block.store.redis.mode=singlestore.redis.type=pipelinestore.redis.single.host=127.0.0.1store.redis.single.port=6379store.redis.sentinel.masterName=store.redis.sentinel.sentinelHosts=store.redis.sentinel.sentinelPassword=store.redis.maxConn=10store.redis.minConn=1store.redis.maxTotal=100store.redis.database=0store.redis.password=store.redis.queryLimit=100#Transaction rule configuration, only for the serverserver.recovery.committingRetryPeriod=1000server.recovery.asynCommittingRetryPeriod=1000server.recovery.rollbackingRetryPeriod=1000server.recovery.timeoutRetryPeriod=1000server.maxCommitRetryTimeout=-1server.maxRollbackRetryTimeout=-1server.rollbackRetryTimeoutUnlockEnable=falseserver.distributedLockExpireTime=10000server.session.branchAsyncQueueSize=5000server.session.enableBranchAsyncRemove=falseserver.enableParallelRequestHandle=trueserver.enableParallelHandleBranch=falseserver.applicationDataLimit=64000server.applicationDataLimitCheck=falseserver.raft.server-addr=127.0.0.1:7091,127.0.0.1:7092,127.0.0.1:7093server.raft.snapshotInterval=600server.raft.applyBatch=32server.raft.maxAppendBufferSize=262144server.raft.maxReplicatorInflightMsgs=256server.raft.disruptorBufferSize=16384server.raft.electionTimeoutMs=2000server.raft.reporterEnabled=falseserver.raft.reporterInitialDelay=60server.raft.serialization=jacksonserver.raft.compressor=noneserver.raft.sync=true#Metrics configuration, only for the servermetrics.enabled=falsemetrics.registryType=compactmetrics.exporterList=prometheusmetrics.exporterPrometheusPort=9898 这里我们主要修改以下几个地方 123456789store.mode=dbstore.lock.mode=dbstore.session.mode=dbstore.db.driverClassName=com.mysql.cj.jdbc.Driver# 这里的IP是我们为MySQL容器分配的IDstore.db.url=jdbc:mysql://172.20.0.2:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=truestore.db.user=rootstore.db.password=123456 修改完毕后点击下面的发布即可。 在Nacos中保存Seata的配置 至此，我们在Nacos的配置已经完成，接下来的步骤就是将Seata注册到Nacos上 2.6.4 注册Seata到Nacos中进入到Seata容器中，我们可以找到/seata-server/resources/application.yml这个文件，Seata本质上也是一个SpringBoot项目，所以可以修改application.yml改变Seata的一些参数。 /seata-server/resources/application.yml 123456789101112131415161718192021222324252627282930313233343536373839server: port: 7091spring: application: name: seata-serverlogging: config: classpath:logback-spring.xml file: path: $&#123;log.home:$&#123;user.home&#125;/logs/seata&#125; extend: logstash-appender: destination: 127.0.0.1:4560 kafka-appender: bootstrap-servers: 127.0.0.1:9092 topic: logback_to_logstashconsole: user: username: seata password: seataseata: config: # support: nacos, consul, apollo, zk, etcd3 type: file registry: # support: nacos, eureka, redis, zk, consul, etcd3, sofa type: file store: # support: file 、 db 、 redis 、 raft mode: file # server: # service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27; security: secretKey: SeataSecretKey0c382ef121d778043159209298fd40bf3850a017 tokenValidityInMilliseconds: 1800000 ignore: urls: /,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.jpeg,/**/*.ico,/api/v1/auth/login 从配置文件可以知道，Seata运行在7091端口上，控制台的用户名和密码都是seata，相关的数据都是文件形式保存在容器中的，所以现在需要修改seata.config和seata.registry，使得Seata能够正确的注册到Nacos上。 1234567seata: config: # support: nacos, consul, apollo, zk, etcd3 type: file registry: # support: nacos, eureka, redis, zk, consul, etcd3, sofa type: file 根据application.example.yml的内容来看，可以知道nacos相关的配置如下，并修改为Nacos的相关信息 12345678910111213141516171819202122232425262728seata: config: # support: nacos, consul, apollo, zk, etcd3 type: nacos nacos: server-addr: 172.20.0.4:8848 namespace: # seata.properties所属的Group的名称 group: DEFAULT_GROUP context-path: # 我们使用第一种鉴权方式：用户名和密码 username: nacos password: nacos data-id: seata.properties registry: # support: nacos, eureka, redis, zk, consul, etcd3, sofa type: nacos preferred-networks: 30.240.* nacos: # 在Nacos中显示Seata的名称 application: seata-server server-addr: 172.20.0.4:8848 group: DEFAULT_GROUP namespace: cluster: default context-path: /nacos username: nacos password: nacos 启动Seata容器，就可以看到Nacos里已经出现Seata服务了。这时候访问http://宿主IP:7091/也是可以访问到Seata的后台页面的 Seata成功在Nacos中注册Seata后台管理页面 现在，一个最基本的微服务环境已经完成。 3. 坑点总结启动Seata容器的时候，SEATA_IP一定是宿主机的IP，否则项目链接的时候会报连接不到Seata服务的异常 1docker run -itd --name Seata --network myNetwork --ip 172.20.0.6 -e SEATA_IP=192.168.10.254 -p 8091:8091 -p 7091:7091 seataio/seata-server","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"微服务","slug":"教程/微服务","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"微服务","slug":"微服务","permalink":"https://summerain0.club/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}]},{"title":"Hexo7迁移指南","slug":"Hexo7迁移指南","date":"2023-12-12T01:44:38.000Z","updated":"2025-01-02T06:10:55.741Z","comments":true,"path":"/2023/12/12/Hexo7迁移指南/","permalink":"https://summerain0.club/2023/12/12/Hexo7%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97/","excerpt":"","text":"前言Hexo 7已正式发布，本文针对于v6向v7迁移的用户。 破坏性更改Node.js要求Hexo7的Node.js要求版本不低于14 标签移除external_link在7.0中，移除了布尔类型的external_link选项，现在推荐使用以下方式进行配置 1234external_link: enable: true # 在新标签中打开链接 field: site # 对整个网站（site）生效或仅对文章（post）生效 exclude: &#x27;&#x27; # 需要排除的域名。主域名和子域名如 www 需分别配置 use_date_for_updateduse_date_for_updated选项已经在v7.0.0+中被移除。请改为使用updated_option: &#39;date&#39;。 日期 / 时间格式https://hexo.io/zh-cn/docs/configuration#%E6%97%A5%E6%9C%9F-x2F-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F front-matter的link选项front-matter中，link选项被移除。 部分标签移出Hexo的内置标签hexo7中不再内置以下4个标签 gist youtube jsfiddle vimeo 如果仍然需要这些标签，可以引入hexo-tag-embed继续在Hexo中使用它们。 1npm i hexo-tag-embed 代码高亮代码高亮相关代码被重构，且其配置也发生了改变，目前代码高亮由syntax_highlighter选项控制，且其值可以为：highlight.js、prismjs或空字符串 在7.0之前，我们代码高亮的配置是这样的 12345678910111213141516highlight: enable: true auto_detect: false line_number: true line_threshold: 0 tab_replace: &#x27;&#x27; exclude_languages: - example wrap: true hljs: falseprismjs: enable: false preprocess: true line_number: true line_threshold: 0 tab_replace: &#x27;&#x27; 在7.0之后，enable的功能就由syntax_highlighter负责 1234567891011121314151617# syntax_highlighter: # 表示不使用任何高亮syntax_highlighter: highlight.js # 表示使用highlight.js# syntax_highlighter: prismjs # 表示使用prismjshighlight: auto_detect: false line_number: true line_threshold: 0 tab_replace: &#x27;&#x27; exclude_languages: - example wrap: true hljs: falseprismjs: preprocess: true line_number: true line_threshold: 0 tab_replace: &#x27;&#x27;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"Hexo","slug":"教程/Hexo","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://summerain0.club/tags/Hexo/"}]},{"title":"MySQL时区问题","slug":"MySQL时区问题","date":"2023-12-10T14:10:30.000Z","updated":"2025-01-02T06:10:55.741Z","comments":true,"path":"/2023/12/10/MySQL时区问题/","permalink":"https://summerain0.club/2023/12/10/MySQL%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/","excerpt":"","text":"MySQL的控制台执行以下命令： 123set global time_zone = &#x27;+8:00&#x27;; # 修改MySQL全局时区为北京时间，即我们所在的东8区set time_zone = &#x27;+8:00&#x27;; # 修改当前会话时区flush privileges; # 立即生效 然后项目重启即可","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"MySQL","slug":"教程/MySQL","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://summerain0.club/tags/MySQL/"},{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"基于Spring6的SSM架构项目的初始化","slug":"spring6-project-init","date":"2023-06-14T06:22:02.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2023/06/14/spring6-project-init/","permalink":"https://summerain0.club/2023/06/14/spring6-project-init/","excerpt":"","text":"环境要求Tomcat 10或以上，JDK17 1. 引入依赖123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;project&gt; &lt;properties&gt; &lt;spring.version&gt;6.0.9&lt;/spring.version&gt; &lt;mysql.version&gt;8.0.33&lt;/mysql.version&gt; &lt;mybatis.version&gt;3.5.13&lt;/mybatis.version&gt; &lt;mybatis.spring.version&gt;3.0.2&lt;/mybatis.spring.version&gt; &lt;druid.version&gt;1.2.18&lt;/druid.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jakarta.servlet&lt;/groupId&gt; &lt;artifactId&gt;jakarta.servlet-api&lt;/artifactId&gt; &lt;version&gt;6.0.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 2. 创建相关配置文件2.1 数据库2.1.1 数据库链接信息在resource文件夹里新建jdbc.properties文件 1234jdbc.driverClassName=com.mysql.cj.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/health?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghaijdbc.username=rootjdbc.password=123456 2.1.2 JdbcConfig.java1234567891011121314151617181920212223public class JdbcConfig &#123; @Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;) private String driverClassName; @Value(&quot;$&#123;jdbc.url&#125;&quot;) private String url; @Value(&quot;$&#123;jdbc.username&#125;&quot;) private String username; @Value(&quot;$&#123;jdbc.password&#125;&quot;) private String password; @Bean public DataSource dataSource() &#123; DruidDataSource dataSource = new DruidDataSource(); dataSource.setDriverClassName(driverClassName); dataSource.setUrl(url); dataSource.setUsername(username); dataSource.setPassword(password); return dataSource; &#125;&#125; 2.2 Mybatis配置文件创建MybatisConfig.java 12345678910111213141516public class MyBatisConfig &#123; @Bean public SqlSessionFactoryBean sqlSessionFactory(DataSource dataSource) &#123; SqlSessionFactoryBean factory = new SqlSessionFactoryBean(); factory.setDataSource(dataSource); factory.setTypeAliasesPackage(&quot;club.summerain0.health.entity&quot;); return factory; &#125; @Bean public MapperScannerConfigurer mapperScannerConfigurer() &#123; MapperScannerConfigurer configurer = new MapperScannerConfigurer(); configurer.setBasePackage(&quot;club.summerain0.health.mapper&quot;); return configurer; &#125;&#125; 2.3 添加SpringMVC的配置文件创建SpringMvcConfig.java 123456@Configuration@ComponentScan(&quot;club.summerain0.health.controller&quot;)@EnableWebMvcpublic class SpringMvcConfig &#123;&#125; 2.4 添加Spring配置文件创建SpringConfig.java 1234567@Configuration@ComponentScan(&quot;club.summerain0.health.service&quot;)@PropertySource(&quot;classpath:jdbc.properties&quot;)@Import(&#123;JdbcConfig.class, MyBatisConfig.class&#125;)public class SpringConfig &#123;&#125; 3. 配置容器启动配置创建ServletConfig.java，继承WebApplicationInitializer的子类在启动的时候被Tomcat自动调用 12345678910111213141516public class ServletConfig extends AbstractAnnotationConfigDispatcherServletInitializer &#123; @Override protected Class&lt;?&gt;[] getRootConfigClasses() &#123; return new Class[]&#123;SpringConfig.class&#125;; &#125; @Override protected Class&lt;?&gt;[] getServletConfigClasses() &#123; return new Class[]&#123;SpringMvcConfig.class&#125;; &#125; @Override protected String[] getServletMappings() &#123; return new String[]&#123;&quot;/&quot;&#125;; &#125;&#125; 自此，一个最基本的SSM项目配置完毕。","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"Spring","slug":"教程/Spring","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Spring/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"Java","slug":"Java","permalink":"https://summerain0.club/tags/Java/"},{"name":"源码","slug":"源码","permalink":"https://summerain0.club/tags/%E6%BA%90%E7%A0%81/"},{"name":"Java Web","slug":"Java-Web","permalink":"https://summerain0.club/tags/Java-Web/"},{"name":"SSM","slug":"SSM","permalink":"https://summerain0.club/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"https://summerain0.club/tags/Spring/"}]},{"title":"用js从0开始做飞机大战（一）","slug":"start-plane-war-from-zero-1","date":"2022-11-28T07:29:00.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/11/28/start-plane-war-from-zero-1/","permalink":"https://summerain0.club/2022/11/28/start-plane-war-from-zero-1/","excerpt":"","text":"体验Demo开始游戏 PC端请注意打开开发者工具使用移动端游玩 1. 环境Phaser.js v2 Phaser.js是一个快速、免费、有趣的开源HTML5游戏框架，提供跨桌面和移动web浏览器的WebGL和画布渲染。游戏可以通过使用第三方工具编译成iOS、Android和本机应用程序。您可以使用JavaScript或TypeScript进行开发。 2. 基础模板2.1 导入phaser.min.jsPhaser官网下载http://phaser.io/download/stable 也可以 直接从本站下载 phaser.js的压缩版本。 2.2 新建 main.js通过Demo得知，我们有四个页面，分别是游戏初始页面，道具介绍页面，游戏主页面和游戏结束页面。于是这里加上基础的模板。 点击展开查看源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354// 创建对象，把舞台绑定到id为game的容器上// 前两个参数为舞台的宽度和高度const game = new Phaser.Game(360, 600, Phaser.AUTO, &#x27;game&#x27;);game.states = &#123;&#125;;// 开始页面场景game.states.preload = function () &#123; // 预加载 this.preload = function () &#123; &#125;; // 舞台被创建时执行 this.create = function () &#123; &#125;;&#125;// 游戏讲解镜头game.states.help = function () &#123; // 舞台被创建时执行 this.create = function () &#123; &#125;;&#125;;// 主游戏场景game.states.main = function () &#123; // 舞台被创建时执行 this.create = function () &#123; &#125; // 更新回调，这个部分会一直不断执行 this.update = function () &#123; &#125;&#125;;// 游戏结束场景game.states.end = function () &#123; // 舞台被创建时执行 this.create = function () &#123; &#125;;&#125;;// 场景注册game.state.add(&quot;preload&quot;, game.states.preload);game.state.add(&quot;help&quot;, game.states.help);game.state.add(&quot;main&quot;, game.states.main);game.state.add(&quot;end&quot;, game.states.end);// 默认先启动preload场景game.state.start(&quot;preload&quot;); 这里出现了许多preload、create和update方法，这分别代表场景被创建前的预加载方法，场景被创建时执行以及不断执行的update方法 2.3 新建 index.html 点击展开查看源码 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;飞机大战&lt;/title&gt; &lt;style&gt; html, body &#123; width: 100%; height: 100%; margin: 0; &#125; #game &#123; width: 100%; height: 100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 整个舞台会绑定在这个容器上 --&gt;&lt;div id=&quot;game&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src=&quot;js/phaser.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;&lt;/html&gt; 3. 游戏全屏显示首先我们定义宽度和高度的放大倍数，用于后续的坐标计算 1234567// 创建对象，把舞台绑定到id为game的容器上// 前两个参数为舞台的宽度和高度const game = new Phaser.Game(360, 600, Phaser.AUTO, &#x27;game&#x27;);game.states = &#123;&#125;;// 舞台放大倍数let multipleX = 1, multipleY = 1; 然后在游戏的初始场景的create方法中计算放大的倍数和设置舞台全屏 Phaser.js v3 版本中并无 this.scale.scaleMode &#x3D; Phaser.ScaleManager.EXACT_FIT; 如此方便的调用 1234567891011121314151617// 开始页面场景game.states.preload = function () &#123; // 预加载 this.preload = function () &#123; &#125;; // 舞台被创建时执行 this.create = function () &#123; // 全屏 this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT; // 记录倍数 multipleX = document.body.clientWidth / game.width; multipleY = document.body.clientHeight / game.height; &#125;;&#125; 此时会发现屏幕一片黑，这是正常情况，因为舞台默认就是黑色的 4. 素材库我们在全局定义一个素材库，方便我们的使用，这里value部分是phaser加载资源文件后内部存储的key值，后面调用资源都是使用这个key，此处可以看下面的代码 点击展开查看源码 12345678910111213141516171819202122232425262728293031323334353637// 素材库const sourcesList = &#123; background: &quot;background&quot;, startButton: &quot;startButton&quot;, startBGM: &quot;startBackgroundMusic&quot;, playBGM: &quot;playBackgroundMusic&quot;, gameOverMusic: &quot;gameOverMusic&quot;, beAttackedMusic: &quot;beAttackedMusic&quot;, playerExplodeMusic: &quot;playerBeAttackedMusic&quot;, getAwardMusic: &quot;getAwardMusic&quot;, myShot: &quot;myShot&quot;, myPlane: &quot;myPlane&quot;, myBullet: &quot;myBullet&quot;, myExplode: &quot;myExplode&quot;, enemyBullet: &quot;enemyBullet&quot;, enemy1: &quot;enemy1&quot;, enemy2: &quot;enemy2&quot;, enemy3: &quot;enemy3&quot;, enemyExplode1: &quot;enemyExplode1&quot;, enemyExplode2: &quot;enemyExplode2&quot;, enemyExplode3: &quot;enemyExplode3&quot;, boss: &quot;boss&quot;, bossExplode: &quot;bossExplode&quot;, startMusicButton: &quot;startBackgroundMusic&quot;, stopMusicButton: &quot;stopBackgroundMusic&quot;, killAward: &quot;killAward&quot;, lifeAward: &quot;lifeAward&quot;, levelAward: &quot;levelAward&quot;, menuButtonAudio: &quot;menuButtonAudio&quot;, startButtonAudio: &quot;startButtonAudio&quot;, replayButton: &quot;replayButton&quot;, shareButton: &quot;shareButton&quot;&#125;; 5. 游戏初始界面5.1 背景这里解释一下，在preload方法中我们对所有的资源文件进行预加载 123456// 这里的sourcesList.background的值就是上面素材库对应的值game.load.image(sourcesList.background, &quot;assets/image/bg.png&quot;); // 背景图// 开始精灵图的尺寸为200*40// 这里初始化一个精灵图，后面的100, 40, 2表示自左向右以一张100*40的大小切割两份game.load.spritesheet(sourcesList.startButton, &quot;assets/image/startButton.png&quot;, 100, 40, 2); // 开始按钮 什么是精灵图呢？就像这样-&gt; 5.1.1 不断滚动的背景1234567// 舞台被创建时执行this.create = function () &#123; // 平铺背景图 const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); // 滚动背景 bg.autoScroll(0, 60);&#125;; 5.1.2 开始按钮12// 开始按钮 X坐标，Y坐标，日常状态，按下时，松开时this.startButton = game.add.button(125, 330, sourcesList.startButton, this.StartClick, this, 1, 1, 0); 5.1.3 源代码 点击展开查看源码 12345678910111213141516171819202122232425262728293031// 开始页面场景game.states.preload = function () &#123; // 预加载 this.preload = function () &#123; /******************************* 图片素材部分 ***************************/ game.load.image(sourcesList.background, &quot;assets/image/bg.png&quot;); // 背景图 game.load.spritesheet(sourcesList.startButton, &quot;assets/image/startButton.png&quot;, 100, 40, 2); // 开始按钮 &#125;; // 舞台被创建时执行 this.create = function () &#123; // 全屏 this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT; // 记录倍数 multipleX = document.body.clientWidth / game.width; multipleY = document.body.clientHeight / game.height; // 滚动背景 const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); bg.autoScroll(0, 60); // 开始按钮 日常状态，按下时，松开时 this.startButton = game.add.button(125, 330, sourcesList.startButton, this.StartClick, this, 1, 1, 0); &#125;; // 开始按钮事件，跳转到讲解页面 this.StartClick = function () &#123; game.state.start(&quot;help&quot;); &#125;;&#125; 5.1.4 效果图 点击展开查看 效果图 5.2 玩家飞机与开始按钮同理，不做阐述 1this.myplane.animations.play(&quot;fly&quot;, 14, true); // 14帧可循环动画 点击展开查看源码 1234567891011121314151617181920212223242526272829303132333435363738// 开始页面场景game.states.preload = function () &#123; // 预加载 this.preload = function () &#123; /******************************* 图片素材部分 ***************************/ game.load.image(sourcesList.background, &quot;assets/image/bg.png&quot;); // 背景图 game.load.spritesheet(sourcesList.startButton, &quot;assets/image/startButton.png&quot;, 100, 40, 2); // 开始按钮 game.load.spritesheet(sourcesList.myPlane, &quot;assets/image/myPlane.png&quot;, 32, 40, 4); // 玩家飞机 &#125;; // 舞台被创建时执行 this.create = function () &#123; // 全屏 this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT; // 记录倍数 multipleX = document.body.clientWidth / game.width; multipleY = document.body.clientHeight / game.height; // 平铺背景图 const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); // 滚动背景 bg.autoScroll(0, 60); // 开始按钮 日常状态，按下时，松开时 this.startButton = game.add.button(125, 330, sourcesList.startButton, this.StartClick, this, 1, 1, 0); // 飞机 this.myplane = game.add.sprite(157, 150, sourcesList.myPlane); this.myplane.animations.add(&quot;fly&quot;); this.myplane.animations.play(&quot;fly&quot;, 14, true); // 14帧可循环动画 &#125;; // 开始按钮事件，跳转到讲解页面 this.StartClick = function () &#123; game.state.start(&quot;help&quot;); &#125;;&#125; 5.3 背景音乐同样需要预加载 1game.load.audio(sourcesList.startBGM, &quot;assets/music/bgm.mp3&quot;); // 开始背景音乐 播放音乐（这里已经加上播放音乐和停止播放音乐的功能，但不做阐述） 123// 背景音乐 音乐资源，响度，是否循环this.backgroundMusicPlayer = game.add.audio(sourcesList.startBGM, 0.2, true);if (isBGMPlay) this.backgroundMusicPlayer.play(); 点击展开查看此时的完整源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150// 创建对象，把舞台绑定到id为game的容器上// 前两个参数为舞台的宽度和高度const game = new Phaser.Game(360, 600, Phaser.AUTO, &#x27;game&#x27;);game.states = &#123;&#125;;// 舞台放大倍数let multipleX = 1, multipleY = 1;// 全局音乐播放标识let isBGMPlay = true;// 素材库const sourcesList = &#123; background: &quot;background&quot;, startButton: &quot;startButton&quot;, startBGM: &quot;startBackgroundMusic&quot;, playBGM: &quot;playBackgroundMusic&quot;, gameOverMusic: &quot;gameOverMusic&quot;, beAttackedMusic: &quot;beAttackedMusic&quot;, playerExplodeMusic: &quot;playerBeAttackedMusic&quot;, getAwardMusic: &quot;getAwardMusic&quot;, myShot: &quot;myShot&quot;, myPlane: &quot;myPlane&quot;, myBullet: &quot;myBullet&quot;, myExplode: &quot;myExplode&quot;, enemyBullet: &quot;enemyBullet&quot;, enemy1: &quot;enemy1&quot;, enemy2: &quot;enemy2&quot;, enemy3: &quot;enemy3&quot;, enemyExplode1: &quot;enemyExplode1&quot;, enemyExplode2: &quot;enemyExplode2&quot;, enemyExplode3: &quot;enemyExplode3&quot;, boss: &quot;boss&quot;, bossExplode: &quot;bossExplode&quot;, startMusicButton: &quot;startBackgroundMusic&quot;, stopMusicButton: &quot;stopBackgroundMusic&quot;, killAward: &quot;killAward&quot;, lifeAward: &quot;lifeAward&quot;, levelAward: &quot;levelAward&quot;, menuButtonAudio: &quot;menuButtonAudio&quot;, startButtonAudio: &quot;startButtonAudio&quot;, replayButton: &quot;replayButton&quot;, shareButton: &quot;shareButton&quot;&#125;;// 开始页面场景game.states.preload = function () &#123; // 预加载 this.preload = function () &#123; /******************************* 图片素材部分 ***************************/ game.load.image(sourcesList.background, &quot;assets/image/bg.png&quot;); // 背景图 game.load.spritesheet(sourcesList.startButton, &quot;assets/image/startButton.png&quot;, 100, 40, 2); // 开始按钮 game.load.spritesheet(sourcesList.myPlane, &quot;assets/image/myPlane.png&quot;, 32, 40, 4); // 玩家飞机 game.load.image(sourcesList.startMusicButton, &quot;assets/image/startMusic.png&quot;); // 播放音乐按钮 game.load.image(sourcesList.stopMusicButton, &quot;assets/image/stopMusic.png&quot;); // 暂停播放音乐按钮 /******************************* 音效部分 ***************************/ game.load.audio(sourcesList.startBGM, &quot;assets/music/bgm.mp3&quot;); // 开始背景音乐 &#125;; // 舞台被创建时执行 this.create = function () &#123; // 全屏 this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT; // 记录倍数 multipleX = document.body.clientWidth / game.width; multipleY = document.body.clientHeight / game.height; // 平铺背景图 const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); // 滚动背景 bg.autoScroll(0, 60); // 开始按钮 日常状态，按下时，松开时 this.startButton = game.add.button(125, 330, sourcesList.startButton, this.StartClick, this, 1, 1, 0); // 飞机 this.myplane = game.add.sprite(157, 150, sourcesList.myPlane); this.myplane.animations.add(&quot;fly&quot;); this.myplane.animations.play(&quot;fly&quot;, 14, true); // 14帧可循环动画 // 背景音乐 this.backgroundMusicPlayer = game.add.audio(sourcesList.startBGM, 0.2, true); if (isBGMPlay) this.backgroundMusicPlayer.play(); // 暂停按钮 this.stopMusicButton = game.add.button(335, 10, sourcesList.stopMusicButton, function () &#123; if (this.backgroundMusicPlayer.isPlaying) &#123; isBGMPlay = false; this.backgroundMusicPlayer.stop(); &#125; &#125;, this, 0, 0, 0); // 播放按钮 this.startMusicButton = game.add.button(310, 10, sourcesList.startMusicButton, function () &#123; if (!this.backgroundMusicPlayer.isPlaying) &#123; isBGMPlay = true; this.backgroundMusicPlayer.play(); &#125; &#125;, this, 0, 0, 0); &#125;; // 开始按钮事件，跳转到讲解页面 this.StartClick = function () &#123; game.state.start(&quot;help&quot;); &#125;;&#125;// 游戏讲解镜头game.states.help = function () &#123; // 舞台被创建时执行 this.create = function () &#123; &#125;;&#125;;// 主游戏场景game.states.main = function () &#123; // 舞台被创建时执行 this.create = function () &#123; &#125; // 更新回调，这个部分会一直不断执行 this.update = function () &#123; &#125;&#125;;// 游戏结束场景game.states.end = function () &#123; // 创建舞台 this.create = function () &#123; &#125;;&#125;;// 场景注册game.state.add(&quot;preload&quot;, game.states.preload);game.state.add(&quot;help&quot;, game.states.help);game.state.add(&quot;main&quot;, game.states.main);game.state.add(&quot;end&quot;, game.states.end);// 默认先启动preload场景game.state.start(&quot;preload&quot;); 6. 游戏操作讲解页面此处和初始页面原理基本一致，直接贴源码 点击展开查看源码 12345678910111213141516171819202122232425262728293031323334353637// 游戏讲解镜头game.states.help = function () &#123; // 舞台被创建时执行 this.create = function () &#123; // 滚动背景 const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); bg.autoScroll(0, 60); // 玩家飞机 this.myplane = game.add.sprite(80, 135, sourcesList.myPlane); this.myplane.animations.add(&quot;fly&quot;); this.myplane.animations.play(&quot;fly&quot;, 14, true); // 14帧可循环动画 const style = &#123;font: &quot;12px 宋体&quot;, fill: &quot;#ff0000&quot;&#125;; game.add.text(125, 150, &quot;玩家飞机,初始生命为10,等级为5&quot;, style); // 奖励 game.add.sprite(80, 175, sourcesList.killAward); game.add.text(125, 185, &quot;获得后清除所有可见敌人&quot;, style); game.add.sprite(85, 210, sourcesList.lifeAward); game.add.text(125, 220, &quot;获得后随机增加生命或护盾&quot;, style); game.add.sprite(85, 250, sourcesList.levelAward); game.add.text(125, 260, &quot;获得后等级+1&quot;, style); game.add.text(50, 320, &quot;★玩家与敌人碰撞或每10个敌人逃脱均会减少生命\\n进入Boss关卡时判定区域为飞机中间的红点&quot;, style); // 开始按钮 this.startButton = game.add.button(125, 430, sourcesList.startButton, this.StartClick, this, 1, 1, 0); &#125;; this.StartClick = function () &#123; game.add.audio(sourcesList.startButtonAudio, 1, false).play(); game.state.start(&quot;main&quot;); &#125;;&#125;; 到此为止的完整源码 点击展开查看此时的完整源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188// 创建对象，把舞台绑定到id为game的容器上// 前两个参数为舞台的宽度和高度const game = new Phaser.Game(360, 600, Phaser.AUTO, &#x27;game&#x27;);game.states = &#123;&#125;;// 舞台放大倍数let multipleX = 1, multipleY = 1;// 全局音乐播放标识let isBGMPlay = true;// 素材库const sourcesList = &#123; background: &quot;background&quot;, startButton: &quot;startButton&quot;, startBGM: &quot;startBackgroundMusic&quot;, playBGM: &quot;playBackgroundMusic&quot;, gameOverMusic: &quot;gameOverMusic&quot;, beAttackedMusic: &quot;beAttackedMusic&quot;, playerExplodeMusic: &quot;playerBeAttackedMusic&quot;, getAwardMusic: &quot;getAwardMusic&quot;, myShot: &quot;myShot&quot;, myPlane: &quot;myPlane&quot;, myBullet: &quot;myBullet&quot;, myExplode: &quot;myExplode&quot;, enemyBullet: &quot;enemyBullet&quot;, enemy1: &quot;enemy1&quot;, enemy2: &quot;enemy2&quot;, enemy3: &quot;enemy3&quot;, enemyExplode1: &quot;enemyExplode1&quot;, enemyExplode2: &quot;enemyExplode2&quot;, enemyExplode3: &quot;enemyExplode3&quot;, boss: &quot;boss&quot;, bossExplode: &quot;bossExplode&quot;, startMusicButton: &quot;startBackgroundMusic&quot;, stopMusicButton: &quot;stopBackgroundMusic&quot;, killAward: &quot;killAward&quot;, lifeAward: &quot;lifeAward&quot;, levelAward: &quot;levelAward&quot;, menuButtonAudio: &quot;menuButtonAudio&quot;, startButtonAudio: &quot;startButtonAudio&quot;, replayButton: &quot;replayButton&quot;, shareButton: &quot;shareButton&quot;&#125;;// 开始页面场景game.states.preload = function () &#123; // 预加载 this.preload = function () &#123; /******************************* 图片素材部分 ***************************/ game.load.image(sourcesList.background, &quot;assets/image/bg.png&quot;); // 背景图 game.load.spritesheet(sourcesList.startButton, &quot;assets/image/startButton.png&quot;, 100, 40, 2); // 开始按钮 game.load.spritesheet(sourcesList.myPlane, &quot;assets/image/myPlane.png&quot;, 32, 40, 4); // 玩家飞机 game.load.image(sourcesList.startMusicButton, &quot;assets/image/startMusic.png&quot;); // 播放音乐按钮 game.load.image(sourcesList.stopMusicButton, &quot;assets/image/stopMusic.png&quot;); // 暂停播放音乐按钮 game.load.image(sourcesList.killAward, &quot;assets/image/award_kill.png&quot;); // 全屏秒杀 game.load.image(sourcesList.lifeAward, &quot;assets/image/award_life.png&quot;); // 加生命 game.load.image(sourcesList.levelAward, &quot;assets/image/award_level.png&quot;); // 加等级 /******************************* 音效部分 ***************************/ game.load.audio(sourcesList.startBGM, &quot;assets/music/bgm.mp3&quot;); // 开始背景音乐 game.load.audio(sourcesList.startButtonAudio, &#x27;assets/music/button.mp3&#x27;); // 开始按钮点击音效 game.load.audio(sourcesList.menuButtonAudio, &#x27;assets/music/button1.mp3&#x27;); // 菜单点击按钮音效 &#125;; // 舞台被创建时执行 this.create = function () &#123; // 全屏 this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT; // 记录倍数 multipleX = document.body.clientWidth / game.width; multipleY = document.body.clientHeight / game.height; // 平铺背景图 const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); // 滚动背景 bg.autoScroll(0, 60); // 开始按钮 日常状态，按下时，松开时 this.startButton = game.add.button(125, 330, sourcesList.startButton, this.StartClick, this, 1, 1, 0); // 飞机 this.myplane = game.add.sprite(157, 150, sourcesList.myPlane); this.myplane.animations.add(&quot;fly&quot;); this.myplane.animations.play(&quot;fly&quot;, 14, true); // 14帧可循环动画 // 背景音乐 音乐资源，响度，是否循环 this.backgroundMusicPlayer = game.add.audio(sourcesList.startBGM, 0.2, true); if (isBGMPlay) this.backgroundMusicPlayer.play(); // 暂停按钮 this.stopMusicButton = game.add.button(335, 10, sourcesList.stopMusicButton, function () &#123; if (this.backgroundMusicPlayer.isPlaying) &#123; isBGMPlay = false; this.backgroundMusicPlayer.stop(); &#125; &#125;, this, 0, 0, 0); // 播放按钮 this.startMusicButton = game.add.button(310, 10, sourcesList.startMusicButton, function () &#123; if (!this.backgroundMusicPlayer.isPlaying) &#123; isBGMPlay = true; this.backgroundMusicPlayer.play(); &#125; &#125;, this, 0, 0, 0); &#125;; // 开始按钮事件，跳转到讲解页面 this.StartClick = function () &#123; game.add.audio(sourcesList.menuButtonAudio, 1, false).play(); this.backgroundMusicPlayer.stop(); game.state.start(&quot;help&quot;); &#125;;&#125;// 游戏讲解镜头game.states.help = function () &#123; // 舞台被创建时执行 this.create = function () &#123; // 滚动背景 const bg = game.add.tileSprite(0, 0, game.width, game.height, sourcesList.background); bg.autoScroll(0, 60); // 玩家飞机 this.myplane = game.add.sprite(80, 135, sourcesList.myPlane); this.myplane.animations.add(&quot;fly&quot;); this.myplane.animations.play(&quot;fly&quot;, 14, true); // 14帧可循环动画 const style = &#123;font: &quot;12px 宋体&quot;, fill: &quot;#ff0000&quot;&#125;; game.add.text(125, 150, &quot;玩家飞机,初始生命为10,等级为5&quot;, style); // 奖励 game.add.sprite(80, 175, sourcesList.killAward); game.add.text(125, 185, &quot;获得后清除所有可见敌人&quot;, style); game.add.sprite(85, 210, sourcesList.lifeAward); game.add.text(125, 220, &quot;获得后随机增加生命或护盾&quot;, style); game.add.sprite(85, 250, sourcesList.levelAward); game.add.text(125, 260, &quot;获得后等级+1&quot;, style); game.add.text(50, 320, &quot;★玩家与敌人碰撞或每10个敌人逃脱均会减少生命\\n进入Boss关卡时判定区域为飞机中间的红点&quot;, style); // 开始按钮 this.startButton = game.add.button(125, 430, sourcesList.startButton, this.StartClick, this, 1, 1, 0); &#125;; this.StartClick = function () &#123; game.add.audio(sourcesList.startButtonAudio, 1, false).play(); game.state.start(&quot;main&quot;); &#125;;&#125;;// 主游戏场景game.states.main = function () &#123; // 舞台被创建时执行 this.create = function () &#123; &#125; // 更新回调，这个部分会一直不断执行 this.update = function () &#123; &#125;&#125;;// 游戏结束场景game.states.end = function () &#123; // 创建舞台 this.create = function () &#123; &#125;;&#125;;// 场景注册game.state.add(&quot;preload&quot;, game.states.preload);game.state.add(&quot;help&quot;, game.states.help);game.state.add(&quot;main&quot;, game.states.main);game.state.add(&quot;end&quot;, game.states.end);// 默认先启动preload场景game.state.start(&quot;preload&quot;); 下一部分预告篇幅问题，下篇讲游戏主题页面与结算页面。牙膏要一点一点挤","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"JavaScript","slug":"教程/JavaScript","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/JavaScript/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://summerain0.club/tags/Web/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://summerain0.club/tags/JavaScript/"},{"name":"飞机大战","slug":"飞机大战","permalink":"https://summerain0.club/tags/%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/"},{"name":"游戏","slug":"游戏","permalink":"https://summerain0.club/tags/%E6%B8%B8%E6%88%8F/"}]},{"title":"Hexo博客百度主动提交链接","slug":"hexo-baidu-url-submit","date":"2022-11-27T07:20:32.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/11/27/hexo-baidu-url-submit/","permalink":"https://summerain0.club/2022/11/27/hexo-baidu-url-submit/","excerpt":"","text":"1. 百度主动推送当我们的网站有新内容产出的时候，首先需要做的是即时将内容提交给百度（等百度主动发现效率太低了），那么这个时候就可以利用sitemap网站地图文件、百度主动推送、百度自动推送这几种方式进行数据提交。 2. 自动推送一般在主题的head.js文件加上js代码即可 1234567891011121314&lt;script&gt;(function()&#123; var bp = document.createElement(&#x27;script&#x27;); var curProtocol = window.location.protocol.split(&#x27;:&#x27;)[0]; if (curProtocol === &#x27;https&#x27;) &#123; bp.src = &#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;; &#125; else &#123; bp.src = &#x27;http://push.zhanzhang.baidu.com/push.js&#x27;; &#125; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(bp, s);&#125;)();&lt;/script&gt; 3. 主动提交某些主机，比如Github，禁止百度爬虫访问博客，导致博客无法被百度收录。多亏百度提供了主动提交的接口，这才有了个补救的方法。除此之外， 使用主动推送还会达到如下功效：及时发现：可以缩短百度爬虫发现您站点新链接的时间，使新发布的页面可以在第一时间被百度收录保护原创：对于网站的最新原创内容，使用主动推送功能可以快速通知到百度，使内容可以在转发之前被百度发现 huiwanggithub.com/huiwang/hexo-baidu-url-submit 3.1 安装插件1npm install hexo-baidu-url-submit --save 3.2 配置_config.yml文件位于根目录下，token可去百度站长中心获取，此处不作介绍 12345baidu_url_submit: count: 200 ## 比如200，代表提交最新的三个链接 host: www.summerain0.club ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 百度站长中心https://ziyuan.baidu.com/ 同样在_config.yml中添加如下配置 12deploy: - type: baidu_url_submitter 样例： 12345deploy: - type: &#x27;git&#x27; repo: git@github.com:summerain0/summerain0.github.io.git branch: master - type: baidu_url_submitter 3.3 验证配置是否成功发布站点的时候查看Log中是否有以下文字即可 12345INFO Deploying: baidu_url_submitterINFO Submitting urls......&#123;&quot;remain&quot;:4999900,&quot;success&quot;:100&#125;INFO Deploy done: baidu_url_submitter","categories":[{"name":"百度推广","slug":"百度推广","permalink":"https://summerain0.club/categories/%E7%99%BE%E5%BA%A6%E6%8E%A8%E5%B9%BF/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://summerain0.club/tags/Web/"},{"name":"推广","slug":"推广","permalink":"https://summerain0.club/tags/%E6%8E%A8%E5%B9%BF/"},{"name":"百度","slug":"百度","permalink":"https://summerain0.club/tags/%E7%99%BE%E5%BA%A6/"},{"name":"网页","slug":"网页","permalink":"https://summerain0.club/tags/%E7%BD%91%E9%A1%B5/"}]},{"title":"Java新特性-Stream流","slug":"java-stream-usage","date":"2022-09-19T15:31:50.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/09/19/java-stream-usage/","permalink":"https://summerain0.club/2022/09/19/java-stream-usage/","excerpt":"","text":"1. 什么是Stream流？Stream是一种类似于工厂的流水线的流式思想。在工厂的流水线上，我们可以在每个关口设置不同的条件进行筛选、检查并在尾部输出最终的成品，这里的Stream也可以这样理解。 2. 案例2.1 找出姓名集合中以张开头的姓名集合原来我们的解决方案是 12345678910111213141516public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; names = new ArrayList&lt;&gt;(); names.add(&quot;老大&quot;); names.add(&quot;小二&quot;); names.add(&quot;张三&quot;); names.add(&quot;张四&quot;); names.add(&quot;王五&quot;); names.add(&quot;张玖&quot;); ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); names.forEach(s -&gt; &#123; if (s.startsWith(&quot;张&quot;)) list.add(s); &#125;); System.out.println(list); &#125;&#125; 而使用Stream后不仅方便，代码量也大大减少，而且代码的可读性也更强 12345678910111213141516public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; names = new ArrayList&lt;&gt;(); names.add(&quot;老大&quot;); names.add(&quot;小二&quot;); names.add(&quot;张三&quot;); names.add(&quot;张四&quot;); names.add(&quot;王五&quot;); names.add(&quot;张玖&quot;); // 过滤出以张开头的姓名，并将结果转换成List方便我们处理 List&lt;String&gt; list = names.stream() .filter(s -&gt; s.startsWith(&quot;张&quot;)) .collect(Collectors.toList()); System.out.println(list); &#125;&#125; 2.2 复杂的集合操作假定我们有一组随机生成的整数集合，我们要过滤出50及以内的数，且剔除重复元素后取前10个进行从小到大排序输出。 有点麻烦是吧？但不难，在一般情况下我们是这么操作的 12345678910111213141516public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;Integer&gt; numList = new ArrayList&lt;&gt;(200); Random random = new Random(); for (int i = 0; i &lt; 200; i++) &#123; numList.add(random.nextInt(101)); &#125; ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); numList.forEach(num -&gt; &#123; if (num &lt;= 50 &amp;&amp; !list.contains(num)) list.add(num); &#125;); List&lt;Integer&gt; tenNumbers = list.subList(0, 10); tenNumbers.sort(Comparator.comparingInt(o -&gt; o)); System.out.println(tenNumbers); &#125;&#125; 在使用Stream进行处理后，代码就变得十分简洁 12345678910111213141516public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;Integer&gt; numList = new ArrayList&lt;&gt;(200); Random random = new Random(); for (int i = 0; i &lt; 200; i++) &#123; numList.add(random.nextInt(101)); &#125; List&lt;Integer&gt; list = numList.stream() .filter(num -&gt; num &lt;= 50) .distinct() .limit(10) .sorted() .collect(Collectors.toList()); System.out.println(list); &#125;&#125; 是不是很Easy？ 3. 方法使用那么我们怎么使用Stream方便我们的开发呢？Stream的方法不多，我们一一讲解。我们先总览一下有哪些方法，一看就知道的方法就不说了 测试环境：JDK11 点开查看 方法描述builder返回一个构造器of构造Stream流filter过滤出符合要求的元素map将流中的元素映射到另一个流中mapToInt将流中元素转成int类型，其他相似方法同理flatMap合并数据flatMapToInt合并数据并转换成int类型，其他相似方法同理distinct剔除重复元素sorted从小到大排序，sorted(Comparator&lt;? super T&gt; comparator)为按一定规则进行排序peek在流（一个步骤）工作之前插入一个操作，但在这里改变元素并不会生效limit获取前n个元素，如果总元素小于n，则不进行操作skip跳过前n个元素takeWhile逐个获取符合规则的元素，遇到不符合的立马结束操作，丢弃后面的所有元素dropWhile逐个删除符合规则的元素，遇到不符合的立马结束操作，返回剩下的所有元素forEach遍历元素，在并行流中输出元素不保证与原来的一致forEachOrdered在并行流中保证输出顺序一致reduce对Stream元素进行聚合求值collect将流转成你想要的类型anyMatch只要有一个元素符合规则就返回TrueallMatch只有每个元素均符合规则时才会返回TruenoneMatch只有每个元素都不符合规则时返回TruefindAny随便返回一个元素，没错，你没看错 3.1 获取Stream流的三种方法3.1.1 builder12345678public class Main &#123; public static void main(String[] args) &#123; Stream.Builder&lt;Integer&gt; builder = Stream.builder(); builder.add(1); builder.add(2); Stream&lt;Integer&gt; stream = builder.build(); &#125;&#125; 3.1.2 of12345678910public class Main &#123; public static void main(String[] args) &#123; Stream&lt;String&gt; stream1 = Stream.of(&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;); Integer[] numbers = new Integer[]&#123;1, 2, 3, 4, 5, 6&#125;; Stream&lt;Integer&gt; stream2 = Stream.of(numbers); Stream&lt;String&gt; stream3 = Stream.ofNullable(null); &#125;&#125; 3.1.3 Collection.stream()任何实现Collection接口的类均可调用stream()获取到Stream流 123456789101112131415161718public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); Stream&lt;Integer&gt; stream1 = nums.stream(); Set&lt;String&gt; set = new HashSet&lt;&gt;(); Stream&lt;String&gt; stream2 = set.stream(); Vector&lt;String&gt; vector = new Vector&lt;&gt;(); Stream&lt;String&gt; stream3 = vector.stream(); // Map不是Collection的子接口，所以需要分别处理 Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); Stream&lt;String&gt; keyStream = map.keySet().stream(); Stream&lt;String&gt; valueStream = map.values().stream(); Stream&lt;Map.Entry&lt;String, String&gt;&gt; entryStream = map.entrySet().stream(); &#125;&#125; 3.2 map将流中的元素映射到另一个流中，在这中间我们可以对元素进行处理，如以下代码是将元素转成int类型，且将456改成999 12345678910111213141516public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; strList = new ArrayList&lt;&gt;(); strList.add(&quot;123&quot;); strList.add(&quot;456&quot;); strList.add(&quot;789&quot;); List&lt;Integer&gt; nums = strList.stream().map( s -&gt; &#123; if (s.equals(&quot;456&quot;)) return 999; else return Integer.parseInt(s); &#125; ).collect(Collectors.toList()); // 输出[123, 999, 789] System.out.println(nums); &#125;&#125; 3.3 mapToInt将流中元素转成int类型，其他相似方法同理 123456789101112131415public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; strList = new ArrayList&lt;&gt;(); strList.add(&quot;123&quot;); strList.add(&quot;456&quot;); strList.add(&quot;789&quot;); List&lt;Integer&gt; nums = strList.stream() .mapToInt(Integer::parseInt) // 注意要写上这句 .boxed() .collect(Collectors.toList()); // 输出[123, 456, 789] System.out.println(nums); &#125;&#125; 3.4 flatMap把两个列表的数据合并成一个列表数据 123456789101112131415161718public class Main &#123; public static void main(String[] args) &#123; List&lt;List&lt;Integer&gt;&gt; lists = new ArrayList&lt;&gt;(); List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(4444); list.add(33333); list.add(444444); // 添加两次 lists.add(list); lists.add(list); System.out.println(lists); List&lt;Integer&gt; result = lists.stream().flatMap(Collection::stream).collect(Collectors.toList()); System.out.println(result); // 输出 // [[4444, 33333, 444444], [4444, 33333, 444444]] // [4444, 33333, 444444, 4444, 33333, 444444] &#125;&#125; 3.5 flatMapToInt把两个列表的数据合并成一个列表数据并将数据转成int类型 123456789101112131415161718192021public class Main &#123; public static void main(String[] args) &#123; List&lt;List&lt;Integer&gt;&gt; lists = new ArrayList&lt;&gt;(); List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(4444); list.add(33333); list.add(444444); // 添加两次 lists.add(list); lists.add(list); System.out.println(lists); List&lt;Integer&gt; result = lists.stream() .flatMapToInt(integers -&gt; integers.stream().mapToInt(value -&gt; value)) .boxed() .collect(Collectors.toList()); System.out.println(result); // 输出 // [[4444, 33333, 444444], [4444, 33333, 444444]] // [4444, 33333, 444444, 4444, 33333, 444444] &#125;&#125; 3.6 filter1234567891011121314151617public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; names = new ArrayList&lt;&gt;(); names.add(&quot;老大&quot;); names.add(&quot;小二&quot;); names.add(&quot;张三&quot;); names.add(&quot;张四&quot;); names.add(&quot;王五&quot;); names.add(&quot;张玖&quot;); ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); names.forEach(s -&gt; &#123; if (s.startsWith(&quot;张&quot;)) list.add(s); &#125;); // 输出[张三, 张四, 张玖] System.out.println(list); &#125;&#125; 3.7 sorted对元素进行排序 12345678910111213141516171819202122232425public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); nums.add(15); nums.add(20); nums.add(3); System.out.println(nums); List&lt;Integer&gt; list1 = nums.stream() .sorted() .collect(Collectors.toList()); List&lt;Integer&gt; list2 = nums.stream() .sorted((o1, o2) -&gt; o2 - o1) .collect(Collectors.toList()); System.out.println(list1); System.out.println(list2); // 输出 // [5, 8, 18, 1, 15, 20, 3] // [1, 3, 5, 8, 15, 18, 20] // [20, 18, 15, 8, 5, 3, 1] &#125;&#125; 3.8 peek在流（一个步骤）工作之前插入一个操作，但在这里改变元素并不会生效 1234567891011121314151617public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); nums.add(15); nums.add(20); nums.add(3); nums.stream() .peek(integer -&gt; System.out.println(&quot;当前在处理：&quot; + integer)) .sorted() .peek(integer -&gt; System.out.println(&quot;当前在准备输出：&quot; + integer)) .forEach(System.out::println); &#125;&#125; 控制台 123456789101112131415161718192021当前在处理：5当前在处理：8当前在处理：18当前在处理：1当前在处理：15当前在处理：20当前在处理：3当前在准备输出：11当前在准备输出：33当前在准备输出：55当前在准备输出：88当前在准备输出：1515当前在准备输出：1818当前在准备输出：2020 3.9 limit获取前n个元素，如果总元素小于n，则不进行操作 12345678910111213141516171819202122232425public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); nums.add(15); nums.add(20); nums.add(3); System.out.println(nums); List&lt;Integer&gt; list1 = nums.stream() .limit(3) .collect(Collectors.toList()); List&lt;Integer&gt; list2 = nums.stream() .limit(100) .collect(Collectors.toList()); System.out.println(list1); System.out.println(list2); // 输出 // [5, 8, 18, 1, 15, 20, 3] // [5, 8, 18] // [5, 8, 18, 1, 15, 20, 3] &#125;&#125; 3.10 skip跳过前n个元素，元素小于等于n个则返回一个空流 1234567891011121314151617181920public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); nums.add(15); nums.add(20); nums.add(3); System.out.println(nums); List&lt;Integer&gt; list = nums.stream() .skip(4) .collect(Collectors.toList()); System.out.println(list); // 输出 // [5, 8, 18, 1, 15, 20, 3] // [15, 20, 3] &#125;&#125; 3.11 takeWhile逐个获取符合规则的元素，遇到不符合的立马结束操作，丢弃后面的所有元素 1234567891011121314151617181920public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); nums.add(15); nums.add(20); nums.add(3); System.out.println(nums); List&lt;Integer&gt; list = nums.stream() .takeWhile(integer -&gt; integer &lt; 10) .collect(Collectors.toList()); System.out.println(list); // 输出 // [5, 8, 18, 1, 15, 20, 3] // [5, 8] &#125;&#125; 3.12 dropWhile逐个删除符合规则的元素，遇到不符合的立马结束操作，返回剩下的所有元素 1234567891011121314151617181920public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); nums.add(15); nums.add(20); nums.add(3); System.out.println(nums); List&lt;Integer&gt; list = nums.stream() .dropWhile(integer -&gt; integer != 1) .collect(Collectors.toList()); System.out.println(list); // 输出 // [5, 8, 18, 1, 15, 20, 3] // [1, 15, 20, 3] &#125;&#125; 3.13 forEach遍历元素，在并行流中输出元素不保证与原来的一致 123456789101112131415public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); nums.stream().forEach(System.out::println); // 输出 // 5 // 8 // 18 // 1 &#125;&#125; 3.14 forEachOrder在并行流中保证输出顺序一致 12345678910111213141516171819202122232425262728public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); System.out.println(nums); // forEach 发现顺序和原来的不一样 System.out.println(&quot;forEach&quot;); nums.stream().parallel().forEach(System.out::println); // forEachOrdered 顺序和原来的一样 System.out.println(&quot;forEachOrdered&quot;); nums.stream().parallel().forEachOrdered(System.out::println); // 输出 // [5, 8, 18, 1] // forEach // 18 // 1 // 5 // 8 // forEachOrdered // 5 // 8 // 18 // 1 &#125;&#125; 3.15 reduce对Stream元素进行归约 12345678910111213public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); long sum = nums.stream().reduce(Integer::sum).get(); // 5+8+18+1=32 // 输出 32 System.out.println(sum); &#125;&#125; 3.16 collect将流转成你想要的类型 123456789101112131415public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; strList = new ArrayList&lt;&gt;(); strList.add(&quot;123&quot;); strList.add(&quot;456&quot;); strList.add(&quot;789&quot;); List&lt;Integer&gt; nums = strList.stream() .mapToInt(Integer::parseInt) .boxed() // 转换成List&lt;Integer&gt;集合 .collect(Collectors.toList()); // 输出[123, 456, 789] System.out.println(nums); &#125;&#125; 3.17 anyMatch只要有一个元素符合规则就返回True 123456789101112131415public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); boolean result1 = nums.stream().anyMatch(integer -&gt; integer == 8); // True System.out.println(result1); boolean result2 = nums.stream().anyMatch(integer -&gt; integer == 5000); // False System.out.println(result2); &#125;&#125; 3.18 allMatch只有每个元素均符合规则时才会返回True 123456789101112131415public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); boolean result1 = nums.stream().allMatch(integer -&gt; integer &lt; 8); // False System.out.println(result1); boolean result2 = nums.stream().allMatch(integer -&gt; integer &gt; 0); // True System.out.println(result2); &#125;&#125; 3.19 noneMatch只有每个元素都不符合规则时返回True 123456789101112131415public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); boolean result1 = nums.stream().noneMatch(integer -&gt; integer &lt; 8); // False System.out.println(result1); boolean result2 = nums.stream().noneMatch(integer -&gt; integer == 0); // True System.out.println(result2); &#125;&#125; 3.20 findAny随便返回一个元素，没错，你没看错 123456789101112public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(8); nums.add(18); nums.add(1); int ele = nums.stream().findAny().get(); // 输出8 System.out.println(ele); &#125;&#125; 3.21 distinct对元素进行去重操作 123456789101112131415161718192021public class Main &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; nums = new ArrayList&lt;&gt;(); nums.add(5); nums.add(5); nums.add(8); nums.add(8); nums.add(18); nums.add(18); nums.add(1); nums.add(1); System.out.println(nums); List&lt;Integer&gt; list = nums.stream() .distinct() .collect(Collectors.toList()); // 输出 // [5, 5, 8, 8, 18, 18, 1, 1] // [5, 8, 18, 1] System.out.println(list); &#125;&#125; 4. 并行流、串行流4.1 串行流这是案例里的代码，此时我们是串行流，即在一条线程中处理 12345678910111213141516public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; names = new ArrayList&lt;&gt;(); names.add(&quot;老大&quot;); names.add(&quot;小二&quot;); names.add(&quot;张三&quot;); names.add(&quot;张四&quot;); names.add(&quot;王五&quot;); names.add(&quot;张玖&quot;); // 过滤出以张开头的姓名，并将结果转换成List方便我们处理 List&lt;String&gt; list = names.stream() .filter(s -&gt; s.startsWith(&quot;张&quot;)) .collect(Collectors.toList()); System.out.println(list); &#125;&#125; 1234567Thread[main,5,main]Thread[main,5,main]Thread[main,5,main]Thread[main,5,main]Thread[main,5,main]Thread[main,5,main][张三, 张四, 张玖] 4.2 并行流parallelStream其实就是一个并行执行的流。它通过默认的ForkJoinPool，可能提高多线程任务的速度。可以通过以下方式获取 12345ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();// 直接获取并行的流 Stream&lt;Integer&gt; stream = list.parallelStream();// 将串行流转成并行流Stream&lt;Integer&gt; stream = list.stream().parallel(); 并行执行效果 1234567891011121314151617181920public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; names = new ArrayList&lt;&gt;(); names.add(&quot;老大&quot;); names.add(&quot;小二&quot;); names.add(&quot;张三&quot;); names.add(&quot;张四&quot;); names.add(&quot;王五&quot;); names.add(&quot;张玖&quot;); // 过滤出以张开头的姓名，并将结果转换成List方便我们处理 List&lt;String&gt; list = names.stream() .parallel() .filter(s -&gt; &#123; System.out.println(Thread.currentThread()); return s.startsWith(&quot;张&quot;); &#125;) .collect(Collectors.toList()); System.out.println(list); &#125;&#125; 1234567Thread[main,5,main]Thread[ForkJoinPool.commonPool-worker-19,5,main]Thread[ForkJoinPool.commonPool-worker-23,5,main]Thread[ForkJoinPool.commonPool-worker-5,5,main]Thread[ForkJoinPool.commonPool-worker-9,5,main]Thread[ForkJoinPool.commonPool-worker-19,5,main][张三, 张四, 张玖] 4.3 执行效率对比在百万级数据处理时，串行流和并行流的耗时分别为131ms和55ms 12345678910111213141516171819202122public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;Integer&gt; names = new ArrayList&lt;&gt;(10000000); Random random = new Random(); for (int i = 0; i &lt; 10000000; i++) &#123; names.add(random.nextInt(1000)); &#125; long startTime = System.currentTimeMillis(); long sum = names.stream() .reduce(Integer::sum) .get(); // 131ms System.out.println(&quot;串行流耗时：&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;); startTime = System.currentTimeMillis(); long sum1 = names.parallelStream() .reduce(Integer::sum) .get(); // 55ms System.out.println(&quot;并行流耗时：&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;); &#125;&#125;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"Java","slug":"教程/Java","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Java/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"Java","slug":"Java","permalink":"https://summerain0.club/tags/Java/"},{"name":"源码","slug":"源码","permalink":"https://summerain0.club/tags/%E6%BA%90%E7%A0%81/"},{"name":"Steam流","slug":"Steam流","permalink":"https://summerain0.club/tags/Steam%E6%B5%81/"}]},{"title":"git常见命令","slug":"git-common-commands","date":"2022-09-19T08:09:15.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/09/19/git-common-commands/","permalink":"https://summerain0.club/2022/09/19/git-common-commands/","excerpt":"","text":"命令 用法 描述 git config git config –global user.name&#x2F;user.email [username&#x2F;email address] 设置提交代码的用户名和电子邮件地址 git init git init [name] 创建一个新的代码库 git clone git clone [url] 通过指定的URL获取一个代码库 git add git add [file] 将一个文件添加至stage git commit git commit -m “message” 版本历史记录中永久记录文件 git diff git diff 显示尚未添加到stage的文件的变更 git reset git reset [file] 从stage中撤出指定的文件，但可以保留文件的内容 git status git status 显示所有需要提交的文件 git rm git rm [file] 删除工作目录中的文件，并将删除动作添加到stage git log git log 显示当前分支的版本历史记录 git show git show [commit] 显示指定提交的元数据以及内容变更 git tag git tag [commitID] 给指定的提交添加标签 git branch git branch 显示当前代码库中所有的本地分支 git checkout git checkout [branch name] 切换分支 git merge git merge [branch name] 将指定分支的历史记录合并到当前分支 git remote git remote add [variable name] [Remote Server Link] 将本地的代码库连接到远程服务器 git push git push [variable name] master 将主分支上提交的变更发送到远程代码库 git pull git pull [Repository Link] 获取远程服务器上的变更，并合并到你的工作目录 git stash git stash save 临时保存所有修改的文件","categories":[{"name":"笔记","slug":"笔记","permalink":"https://summerain0.club/categories/%E7%AC%94%E8%AE%B0/"},{"name":"git","slug":"笔记/git","permalink":"https://summerain0.club/categories/%E7%AC%94%E8%AE%B0/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://summerain0.club/tags/git/"},{"name":"命令","slug":"命令","permalink":"https://summerain0.club/tags/%E5%91%BD%E4%BB%A4/"}]},{"title":"Android Material Design的使用（一）- MaterialButton篇","slug":"material-design-materialbutton","date":"2022-09-04T06:21:39.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/09/04/material-design-materialbutton/","permalink":"https://summerain0.club/2022/09/04/material-design-materialbutton/","excerpt":"","text":"前言本系列将要介绍Material design库包含的所有控件，当前文章基于 com.google.android.material:material:1.4.0 讲解 MaterialButtonWhat is MaterialButton?MaterialButton是Google于SDK28推出的新控件，当遇到按钮需要圆角、或者描边等，就不必使用xml文件或者Github上找第三方库实现。 MaterialButtonhttps://developer.android.google.cn/reference/com/google/android/material/button/MaterialButton 效果图 实际运用效果如图片最后一个按钮 123456789101112&lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;后置着色&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:cornerRadius=&quot;10dp&quot; app:icon=&quot;@drawable/ic_android_black_24dp&quot; app:iconGravity=&quot;textEnd&quot; app:iconTint=&quot;#ff0000&quot; /&gt; 啥？闪退了？那就删除吧 关于闪退问题在v1.1.0以后，使用MD控件可能会出现闪退的问题，原因是未将theme设置为MaterialComponents，解决方法如下： 方法一在控件中添加 1android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; 即可解决 方法二123&lt;style name=&quot;MaterialComponents_Theme&quot; parent=&quot;Theme.MaterialComponents.Light.NoActionBar&quot;&gt;...&lt;/style&gt; 然后设置App主题为@style&#x2F;MaterialComponents_Theme即可 常见问题关于Backgroundnote quote All attributes from MaterialButton are supported. Do not use the android:background attribute. MaterialButton manages its own background drawable, and setting a new background means MaterialButton can no longer guarantee that the new attributes it introduces will function properly. If the default background is changed, MaterialButton cannot guarantee well-defined behavior. 大意就是不可以使用android:background设置背景，会破坏MaterialButton本身的绘制，而设置背景则推荐使用app:backgroundTint 关于insetTop、insetBottomMaterialButton创建后，按钮实际长度并不是设定值，因为它上下有留空，可以使用 12android:insetBottom=&quot;0dp&quot;android:insetTop=&quot;0dp&quot; 去除。 去除阴影MD控件默认有阴影效果，但是有时候我们并不想要按钮有阴影，那么这时候可以指定style为 1style=&quot;@style/Widget.MaterialComponents.Button.UnelevatedButton&quot; 这样就能去掉阴影，让视图看起来扁平化。 公开属性 属性 描述 参数 app:backgroundTint 背景着色 默认为?attr&#x2F;colorPrimary app:backgroundTintMode 着色模式 add,multiply,screen,src_atop,src_in,src_over app:strokeColor 描边颜色 app:strokeWidth 描边宽度 app:cornerRadius 圆角大小 app:rippleColor 按压水波纹颜色 app:icon 图标icon app:iconSize 图标大小 app:iconGravity 图标重心 start,end.textStart,textEnd app:iconTint 图标着色 app:iconTintMode 图标着色模式 add,multiply,screen,src_atop,src_in,src_over app:iconPadding 图标和文本之间的间距 项目完整源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center&quot; android:orientation=&quot;vertical&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;普通按钮&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Material&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;圆角 10dp&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:cornerRadius=&quot;10dp&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;描边 2dp&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:strokeColor=&quot;#ff0000&quot; app:strokeWidth=&quot;2dp&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;图标&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:cornerRadius=&quot;10dp&quot; app:icon=&quot;@drawable/ic_android_black_24dp&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:layout_width=&quot;150dp&quot; android:layout_height=&quot;50dp&quot; android:text=&quot;后置着色&quot; android:textAllCaps=&quot;false&quot; android:textColor=&quot;@android:color/white&quot; android:textSize=&quot;18sp&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; app:cornerRadius=&quot;10dp&quot; app:icon=&quot;@drawable/ic_android_black_24dp&quot; app:iconGravity=&quot;textEnd&quot; app:iconTint=&quot;#ff0000&quot; /&gt;&lt;/LinearLayout&gt; MaterialButtonToggleGroup什么是MaterialButtonToggleGroup？类似一个LinearLayout，但只能添加MaterialButton，只有第一个子元素的最左边角和最后一个子元素的最右边角才能保留它们的形状外观或角大小，类似于iOS中的SegmentedControl，用户可以从组中选择一个或多个选项。 MaterialButtonhttps://developer.android.google.cn/reference/com/google/android/material/button/MaterialButtonToggleGroup 举个栗子布局源码12345678910111213141516171819202122232425262728293031323334&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;com.google.android.material.button.MaterialButtonToggleGroup xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:id=&quot;@+id/toggleGroup&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:checkedButton=&quot;@id/btn1&quot; app:singleSelection=&quot;true&quot;&gt; &lt;com.google.android.material.button.MaterialButton android:id=&quot;@+id/btn1&quot; style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;选项一&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:id=&quot;@+id/btn2&quot; style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;选项二&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; /&gt; &lt;com.google.android.material.button.MaterialButton android:id=&quot;@+id/btn3&quot; style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;选项三&quot; android:theme=&quot;@style/Theme.MaterialComponents.Light.NoActionBar&quot; /&gt;&lt;/com.google.android.material.button.MaterialButtonToggleGroup&gt; 监听方法1234567MaterialButtonToggleGroup materialButtonToggleGroup = findViewById(R.id.toggleGroup);materialButtonToggleGroup.addOnButtonCheckedListener(new MaterialButtonToggleGroup.OnButtonCheckedListener() &#123; @Override public void onButtonChecked(MaterialButtonToggleGroup group, int checkedId, boolean isChecked) &#123; Toast.makeText(MainActivity.this, &quot;ID：&quot; + checkedId + &quot;, checked：&quot; + isChecked, Toast.LENGTH_SHORT).show(); &#125;&#125;); 公开属性 属性 描述 参数 app:checkedButton 默认选中 按钮ID app:singleSelection 是否单项选择 true&#x2F;false app:selectionRequired 设置为true后，强制至少选中一个 true&#x2F;false","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"Material Design","slug":"教程/Material-Design","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Material-Design/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"Android","permalink":"https://summerain0.club/tags/Android/"},{"name":"源码","slug":"源码","permalink":"https://summerain0.club/tags/%E6%BA%90%E7%A0%81/"},{"name":"Material Design","slug":"Material-Design","permalink":"https://summerain0.club/tags/Material-Design/"},{"name":"Button","slug":"Button","permalink":"https://summerain0.club/tags/Button/"}]},{"title":"Android自定义全局异常捕获——Activity形式","slug":"activity-uncaught-exception","date":"2022-09-03T15:57:30.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/09/03/activity-uncaught-exception/","permalink":"https://summerain0.club/2022/09/03/activity-uncaught-exception/","excerpt":"","text":"前言开发安卓的小伙伴都遇到过APP突然崩溃,无响应的情况.如果发生在自己手中,那么还可以通过IDE查看错误日志,但是实际都是发生在用户手中,那么这个时候产生崩溃,无响应ANR异常就很麻烦.无从下手.因此,需要全局异常捕获.也就是对未知异常,程序员没有处理的异常进行处理,记录等便于分析查找原因，而一个美观的崩溃提示则可以大大加分 。 效果展示效果展示 源码MyUncaughtExceptionHandler.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152import android.content.Context;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Build;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintWriter;import java.io.StringWriter;import java.io.Writer;import java.lang.reflect.Field;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.Locale;/** * @ClassName MyUncaughtExceptionHandler * @Description 全局捕捉异常 * @Author summerain0 * @Date 2020/9/11 15:31 */public class MyUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler &#123; // 单例 private static MyUncaughtExceptionHandler myUncaughtExceptionHandler; // 上下文 private Context context; // 会输出到文件中 private StringBuilder stringBuilder; // 系统异常处理器 private Thread.UncaughtExceptionHandler defaultUncaughtExceptionHandler; public MyUncaughtExceptionHandler(Context context) &#123; this.context = context; &#125; // 获取单例 public static synchronized MyUncaughtExceptionHandler getInstance(Context ctx) &#123; if (myUncaughtExceptionHandler == null) &#123; myUncaughtExceptionHandler = new MyUncaughtExceptionHandler(ctx); &#125; return myUncaughtExceptionHandler; &#125; // 初始化 public void init() &#123; defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler(); Thread.setDefaultUncaughtExceptionHandler(this); &#125; @Override public void uncaughtException(Thread thread, Throwable throwable) &#123; if (throwable == null) &#123; defaultUncaughtExceptionHandler.uncaughtException(thread, throwable); &#125; // 创建集合对象 stringBuilder = new StringBuilder(); // 记录时间 SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd_HH:mm:ss.SSS&quot;, Locale.getDefault()); String date = simpleDateFormat.format(new Date()); addMessage(&quot;崩溃时间&quot;, date); // 记录应用版本信息 try &#123; PackageManager pm = context.getPackageManager(); PackageInfo pi = pm.getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); addMessage(&quot;版本名&quot;, pi.versionName); addMessage(&quot;版本号&quot;, pi.versionCode); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); addMessage(&quot;error&quot;, &quot;记录版本信息失败！&quot; + e.getMessage()); &#125; // 记录设备信息 Field[] fields = Build.class.getDeclaredFields(); for (Field field : fields) &#123; try &#123; field.setAccessible(true); Object obj = field.get(null); if (obj != null) &#123; addMessage(field.getName(), obj); &#125; &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); addMessage(&quot;error&quot;, &quot;记录设备信息失败！&quot; + e.getMessage()); &#125; &#125; // 添加分隔符 addMessage(null, &quot;==============================================================&quot;); addMessage(null, &quot;======================== 崩溃日志 =========================&quot;); addMessage(null, &quot;==============================================================&quot;); // 记录崩溃信息 Writer writer = new StringWriter(); PrintWriter printWriter = new PrintWriter(writer); throwable.printStackTrace(printWriter); Throwable cause = throwable.getCause(); while (cause != null) &#123; cause.printStackTrace(printWriter); cause = cause.getCause(); &#125; printWriter.close(); addMessage(null, writer.toString()); // 生成路径，保存至/Android/data/包名，无需读写权限 try &#123; File root = context.getExternalFilesDir(&quot;log&quot;); String filename = date + &quot;.log&quot;; File file = new File(root, filename); FileOutputStream fos = new FileOutputStream(file); fos.write(stringBuilder.toString().getBytes()); fos.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); defaultUncaughtExceptionHandler.uncaughtException(thread, throwable); &#125; // 启动崩溃异常页面 Intent intent = new Intent(context, UncaughtExceptionActivity.class); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);// 请勿修改，否则无法打开页面 intent.putExtra(&quot;error&quot;, stringBuilder.toString()); context.startActivity(intent); System.exit(1);// 请勿修改，否则无法打开页面 &#125; // 添加数据 private void addMessage(String key, Object obj) &#123; // 对数组做一下处理 if (obj instanceof String[]) &#123; String[] list = (String[]) obj; ArrayList&lt;String&gt; array = new ArrayList&lt;&gt;(Arrays.asList(list)); stringBuilder.append(key).append(&quot;=&quot;).append(array.toString()).append(&quot;\\n&quot;); &#125; // 其他的都直接添加 if (key == null) &#123; stringBuilder.append(obj) .append(&quot;\\n&quot;); &#125; else &#123; stringBuilder.append(key) .append(&quot;=&quot;) .append(obj) .append(&quot;\\n&quot;); &#125; &#125;&#125; UncaughtExceptionActivity.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import android.content.Intent;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.widget.ScrollView;import android.widget.TextView;import android.widget.Toast;import androidx.appcompat.app.AppCompatActivity;/** * @ClassName UncaughtExceptionActivity * @Description 异常页面 * @Author summerain0 * @Date 2020/9/12 11:02 */public class UncaughtExceptionActivity extends AppCompatActivity &#123; public static final String TAG = &quot;UncaughtExceptionActivity&quot;; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); // 读取日志，显示在屏幕上 String msg = getIntent().getStringExtra(&quot;error&quot;); ScrollView scrollView = new ScrollView(this);// 防止日志太长看不完 scrollView.setLayoutParams(new ScrollView.LayoutParams(ScrollView.LayoutParams.MATCH_PARENT, ScrollView.LayoutParams.MATCH_PARENT)); TextView textView = new TextView(this); textView.setText(msg); scrollView.addView(textView); setContentView(scrollView); &#125; @Override public boolean onCreateOptionsMenu(Menu menu) &#123; menu.add(0, 0, 0, &quot;重启&quot;).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM); menu.add(0, 1, 0, &quot;上传&quot;).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM); return super.onCreateOptionsMenu(menu); &#125; @Override public boolean onOptionsItemSelected(MenuItem item) &#123; switch (item.getItemId()) &#123; case 0: Intent intent = new Intent(this, MainActivity.class); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);// 请勿修改，否则无法打开页面 startActivity(intent); System.exit(1);// 请勿修改，否则无法打开页面 case 1: // 这里自己写上传逻辑 Toast.makeText(this, &quot;已上传！&quot;, Toast.LENGTH_SHORT).show(); &#125; return true; &#125;&#125; MyApplication.java123456789101112131415161718import android.app.Application;/** * @ClassName MyApplication * @Description TODO * @Author summerain0 * @Date 2020/9/11 14:00 */public class MyApplication extends Application &#123; public static final String TAG = &quot;MyApplication&quot;; @Override public void onCreate() &#123; super.onCreate(); // 初始化异常处理器 MyUncaughtExceptionHandler.getInstance(MyApplication.this).init(); &#125;&#125; AndroidManifest.xml123456789&lt;application android:name=&quot;.MyApplication&quot; ......&gt; &lt;activity android:label=&quot;崩溃异常&quot; android:name=&quot;.UncaughtExceptionActivity&quot; /&gt;&lt;/application&gt;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"教程/Android","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Android/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"Android","permalink":"https://summerain0.club/tags/Android/"},{"name":"Java","slug":"Java","permalink":"https://summerain0.club/tags/Java/"},{"name":"源码","slug":"源码","permalink":"https://summerain0.club/tags/%E6%BA%90%E7%A0%81/"}]},{"title":"自定义全局异常捕捉——保存至本地","slug":"file-uncaught-exception","date":"2022-09-03T15:57:30.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/09/03/file-uncaught-exception/","permalink":"https://summerain0.club/2022/09/03/file-uncaught-exception/","excerpt":"","text":"前言开发安卓的小伙伴都遇到过APP突然崩溃,无响应的情况.如果发生在自己手中,那么还可以通过IDE查看错误日志,但是实际都是发生在用户手中,那么这个时候产生崩溃,无响应ANR异常就很麻烦.无从下手.因此,需要全局异常捕获.也就是对未知异常,程序员没有处理的异常进行处理,记录等便于分析查找原因. 源码MyUncaughtExceptionHandler.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Build;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintWriter;import java.io.StringWriter;import java.io.Writer;import java.lang.reflect.Field;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.Locale;/** * @ClassName MyUncaughtExceptionHandler * @Description 全局捕捉异常 * @Author summerain0 * @Date 2020/9/11 15:31 */public class MyUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler &#123; // 单例 private static MyUncaughtExceptionHandler myUncaughtExceptionHandler; // 上下文 private Context context; // 会输出到文件中 private StringBuilder stringBuilder; // 系统异常处理器 private Thread.UncaughtExceptionHandler defaultUncaughtExceptionHandler; public MyUncaughtExceptionHandler(Context context) &#123; this.context = context; &#125; // 获取单例 public static synchronized MyUncaughtExceptionHandler getInstance(Context ctx) &#123; if (myUncaughtExceptionHandler == null) &#123; myUncaughtExceptionHandler = new MyUncaughtExceptionHandler(ctx); &#125; return myUncaughtExceptionHandler; &#125; // 初始化 public void init() &#123; defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler(); Thread.setDefaultUncaughtExceptionHandler(this); &#125; @Override public void uncaughtException(Thread thread, Throwable throwable) &#123; if (throwable == null) &#123; defaultUncaughtExceptionHandler.uncaughtException(thread, throwable); &#125; // 创建集合对象 stringBuilder = new StringBuilder(); // 记录时间 SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd_HH:mm:ss.SSS&quot;, Locale.getDefault()); String date = simpleDateFormat.format(new Date()); addMessage(&quot;崩溃时间&quot;, date); // 记录应用版本信息 try &#123; PackageManager pm = context.getPackageManager(); PackageInfo pi = pm.getPackageInfo(context.getPackageName(), PackageManager.GET_ACTIVITIES); addMessage(&quot;版本名&quot;, pi.versionName); addMessage(&quot;版本号&quot;, pi.versionCode); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); addMessage(&quot;error&quot;, &quot;记录版本信息失败！&quot; + e.getMessage()); &#125; // 记录设备信息 Field[] fields = Build.class.getDeclaredFields(); for (Field field : fields) &#123; try &#123; field.setAccessible(true); Object obj = field.get(null); if (obj != null) &#123; addMessage(field.getName(), obj); &#125; &#125; catch (IllegalAccessException e) &#123; e.printStackTrace(); addMessage(&quot;error&quot;, &quot;记录设备信息失败！&quot; + e.getMessage()); &#125; &#125; // 添加分隔符 addMessage(null, &quot;==============================================================&quot;); addMessage(null, &quot;======================== 崩溃日志 =========================&quot;); addMessage(null, &quot;==============================================================&quot;); // 记录崩溃信息 Writer writer = new StringWriter(); PrintWriter printWriter = new PrintWriter(writer); throwable.printStackTrace(printWriter); Throwable cause = throwable.getCause(); while (cause != null) &#123; cause.printStackTrace(printWriter); cause = cause.getCause(); &#125; printWriter.close(); addMessage(null, writer.toString()); // 生成路径，保存至/Android/data/包名，无需读写权限 try &#123; File root = context.getExternalFilesDir(&quot;log&quot;); String filename = date + &quot;.log&quot;; File file = new File(root, filename); FileOutputStream fos = new FileOutputStream(file); fos.write(stringBuilder.toString().getBytes()); fos.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); defaultUncaughtExceptionHandler.uncaughtException(thread, throwable); &#125; &#125; // 添加数据 private void addMessage(String key, Object obj) &#123; // 对数组做一下处理 if (obj instanceof String[]) &#123; String[] list = (String[]) obj; ArrayList&amp;lt;String&amp;gt; array = new ArrayList&amp;lt;&amp;gt;(Arrays.asList(list)); stringBuilder.append(key).append(&quot;=&quot;).append(array.toString()).append(&quot;\\n&quot;); &#125; // 其他的都直接添加 if (key == null) &#123; stringBuilder.append(obj) .append(&quot;\\n&quot;); &#125; else &#123; stringBuilder.append(key) .append(&quot;=&quot;) .append(obj) .append(&quot;\\n&quot;); &#125; &#125;&#125; MyApplication.java123456789101112131415161718import android.app.Application;/** * @ClassName MyApplication * @Description TODO * @Author summerain0 * @Date 2020/9/11 14:00 */public class MyApplication extends Application &#123; public static final String TAG = &quot;MyApplication&quot;; @Override public void onCreate() &#123; super.onCreate(); // 初始化异常处理器 MyUncaughtExceptionHandler.getInstance(MyApplication.this).init(); &#125;&#125; AndroidManifest.xml1234&lt;application android:name=&quot;.MyApplication&quot; ....&gt;&lt;/application&gt;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"教程/Android","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Android/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"Android","permalink":"https://summerain0.club/tags/Android/"},{"name":"Java","slug":"Java","permalink":"https://summerain0.club/tags/Java/"},{"name":"源码","slug":"源码","permalink":"https://summerain0.club/tags/%E6%BA%90%E7%A0%81/"}]},{"title":"还在用老办法获取版本号或者签名信息吗？不如试试PackageInfoCompat吧！","slug":"android-package-info-compat","date":"2022-09-03T14:14:20.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/09/03/android-package-info-compat/","permalink":"https://summerain0.club/2022/09/03/android-package-info-compat/","excerpt":"","text":"前言之前的很久时间，我们都是使用以下的方式获取应用的版本号，但在Android SDK 28中，谷歌弃用了该方式，推荐使用getLongVersionCode() 12345678910public int getSelfVersionCode(Context context)&#123; try &#123; PackageManager packageManager = context.getPackageManager(); PackageInfo info = packageManager.getPackageInfo(context.getPackageName(),0); return info.versionCode; &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); return -1; &#125;&#125; 但 getLongVersionCode() 仅限API28及以上使用，所以我们需要判断版本号并做出对应处理。 那么，我们可以一步到位吗？ 答案是可以的！ PackageInfoCompat引入依赖12345// Androidximplementation &#x27;androidx.appcompat:appcompat:1.3.0-rc01&#x27;// Android Supportimplementation &#x27;com.android.support:appcompat-v7:28.0.0&#x27; What is PackageInfoCompat？PackageInfoCompat顾名思义，是用来代替PackageInfo部分功能的，里面仅包含三个静态方法 修饰符 方法参数 方法作用 static Long getLongVersionCode( info: PackageInfo) 返回版本号 static MutableList&lt;Signature!&gt; getSignatures( packageManager: PackageManager, packageName: String) 获取签名数组 static Boolean hasSignatures( packageManager: PackageManager, packageName: String,certificatesAndType: MutableMap&lt;ByteArray!, Int!&gt;, matchExact: Boolean) 检查设备上的包是否包含一组证书。 使用getLongVersionCode - 获取版本号，内部实现其实与上文提到的方法无异 JavaKotlin内部实现12345678910public long getSelfVersionCode(Context context) &#123; try &#123; PackageManager packageManager = context.getPackageManager(); PackageInfo info = packageManager.getPackageInfo(context.getPackageName(), 0); return PackageInfoCompat.getLongVersionCode(info); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); return -1; &#125;&#125;12345fun getSelfVersionCode(context: Context): Long &#123; val packageManager = context.packageManager val info = packageManager.getPackageInfo(context.packageName, 0) return PackageInfoCompat.getLongVersionCode(info)&#125;1234567@SuppressWarnings(&quot;deprecation&quot;)public static long getLongVersionCode(@NonNull PackageInfo info) &#123; if (Build.VERSION.SDK_INT &gt;= 28) &#123; return info.getLongVersionCode(); &#125; return info.versionCode;&#125; getSignatures - 获取应用签名， signatures 在SDK28中被 signingInfo 替代 JavaKotlin1234567891011121314151617181920public String getSelfSignToSHA1(Context context) &#123; try &#123; PackageManager packageManager = context.getPackageManager(); List&lt;Signature&gt; signatureList = PackageInfoCompat.getSignatures(packageManager,context.getPackageName()); byte[] cert = signatureList.get(0).toByteArray(); MessageDigest md = MessageDigest.getInstance(&quot;SHA1&quot;); byte[] publicKey = md.digest(cert); StringBuilder hexString = new StringBuilder(); for (int i = 0; i &lt; publicKey.length; i++) &#123; String appendString = Integer.toHexString(0xFF &amp; publicKey[i]).toUpperCase(Locale.US); if (appendString.length() == 1)hexString.append(&quot;0&quot;); hexString.append(appendString); if (i != publicKey.length - 1) hexString.append(&quot;:&quot;); &#125; return hexString.toString(); &#125; catch (Exception e) &#123; e.printStackTrace(); return null; &#125;&#125;12345678910111213141516fun getSelfSign(context: Context): String &#123; val packageManager = context.packageManager val signatures = PackageInfoCompat.getSignatures(packageManager, context.packageName) val bytes = signatures[0].toByteArray() val messageDigest = MessageDigest.getInstance(&quot;SHA1&quot;) val publicKey: ByteArray = messageDigest.digest(bytes) val hexString = StringBuilder() for (i in publicKey.indices) &#123; val appendString = Integer.toHexString(0xFF and publicKey[i].toInt()) .toUpperCase(Locale.US) if (appendString.length == 1) hexString.append(&quot;0&quot;) hexString.append(appendString) if (i != publicKey.size - 1) hexString.append(&quot;:&quot;) &#125; return hexString.toString()&#125;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"教程/Android","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Android/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"Android","permalink":"https://summerain0.club/tags/Android/"},{"name":"Java","slug":"Java","permalink":"https://summerain0.club/tags/Java/"},{"name":"源码","slug":"源码","permalink":"https://summerain0.club/tags/%E6%BA%90%E7%A0%81/"}]},{"title":"Android Compose - 官方SwipeRefreshLayout（下拉刷新）","slug":"jetpack-compose-swipe-refresh-layout","date":"2022-09-03T11:05:11.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/09/03/jetpack-compose-swipe-refresh-layout/","permalink":"https://summerain0.club/2022/09/03/jetpack-compose-swipe-refresh-layout/","excerpt":"","text":"Demo 引入依赖1234567repositories &#123; mavenCentral()&#125;dependencies &#123; implementation &quot;com.google.accompanist:accompanist-swiperefresh:&lt;version&gt;&quot;&#125; 使用方法1234567891011121314151617181920212223242526272829303132class MyViewModel : ViewModel() &#123; private val _isRefreshing = MutableStateFlow(false) val isRefreshing: StateFlow&lt;Boolean&gt; get() = _isRefreshing.asStateFlow() fun refresh() &#123; viewModelScope.launch &#123; // 延迟2秒 _isRefreshing.emit(true) delay(2000) _isRefreshing.emit(false) &#125; &#125;&#125;@Composablefun SwipeRefreshSample() &#123; val viewModel: MyViewModel = viewModel() val isRefreshing by viewModel.isRefreshing.collectAsState() SwipeRefresh( state = rememberSwipeRefreshState(isRefreshing), onRefresh = &#123; viewModel.refresh() &#125;, ) &#123; LazyColumn &#123; items(30) &#123; index -&gt; // item列表 &#125; &#125; &#125;&#125;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"Jetpack Compose","slug":"教程/Jetpack-Compose","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Jetpack-Compose/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"Android","slug":"Android","permalink":"https://summerain0.club/tags/Android/"},{"name":"源码","slug":"源码","permalink":"https://summerain0.club/tags/%E6%BA%90%E7%A0%81/"},{"name":"Jetpack Compose","slug":"Jetpack-Compose","permalink":"https://summerain0.club/tags/Jetpack-Compose/"}]},{"title":"SpringBoot的MyBatis简单配置","slug":"springboot-mybatis-config","date":"2022-09-03T05:58:01.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/09/03/springboot-mybatis-config/","permalink":"https://summerain0.club/2022/09/03/springboot-mybatis-config/","excerpt":"","text":"1. 引入依赖1.1 修改pom.xml123456789101112&lt;!-- mysql 驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.29&lt;/version&gt;&lt;/dependency&gt;&lt;!-- Mybatis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.2.2&lt;/version&gt;&lt;/dependency&gt; 1.2 修改配置 application.yml123mybatis: mapper-locations: classpath:mapping/*Mapper.xml type-aliases-package: com.summerain0.cloud.common.core.domain.entity 参数讲解注意 mapper-locations 表示映射文件储存的地方，例如 classpath:mapping&#x2F;*Mapper.xml 指代resources文件夹下mapping里所有Mapper.xml结尾的文件type-aliases-package 是实体类所在的位置 自此，MyBatis的引入完成 2. 小小的例子2.1 建立实体类1234567891011import lombok.Data;import lombok.ToString;@Data@ToStringpublic class SysUser &#123; private Integer id; private String username; private String password; private String nick;&#125; 2.2 建立映射类1234@Repositorypublic interface UserMapper &#123; SysUser findById(int id);&#125; 同时在resources的mapping文件里建立一个和映射类同名的xml文件 123456789101112131415161718&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.summerain0.cloud.system.mapper.UserMapper&quot;&gt; &lt;resultMap id=&quot;SysUser&quot; type=&quot;com.summerain0.cloud.common.core.domain.entity.SysUser&quot;&gt; &lt;result column=&quot;id&quot; jdbcType=&quot;INTEGER&quot; property=&quot;id&quot;/&gt; &lt;result column=&quot;username&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;username&quot;/&gt; &lt;result column=&quot;password&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;password&quot;/&gt; &lt;result column=&quot;nick&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;nick&quot;/&gt; &lt;/resultMap&gt; &lt;select id=&quot;findById&quot; resultType=&quot;com.summerain0.cloud.common.core.domain.entity.SysUser&quot;&gt; select * from sys_user where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 2.3 建立测试方法123456789101112131415161718public interface UserService &#123; SysUser findById(int id);&#125;@Servicepublic class IUserService implements UserService &#123; private UserMapper userMapper; @Override public SysUser findById(int id) &#123; return userMapper.findById(id); &#125; @Autowired public void setUserMapper(UserMapper userMapper) &#123; this.userMapper = userMapper; &#125;&#125; 2.4 提供接口1234567891011121314@RestControllerpublic class TestController &#123; private IUserService userService; @RequestMapping(&quot;/test&quot;) public String test() &#123; return userService.findById(3).toString(); &#125; @Autowired public void setUserService(IUserService userService) &#123; this.userService = userService; &#125;&#125; 2.5 测试结果运行结果 3. 常见问题3.1 找不到Mapper？在启动类加入@MapperScan(“com.summerain0.cloud.system.mapper”)即可 1234567@MapperScan(&quot;com.summerain0.cloud.system.mapper&quot;)@SpringBootApplicationpublic class CloudApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(CloudApplication.class, args); &#125;&#125;","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"SpringBoot","slug":"教程/SpringBoot","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/SpringBoot/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"Java","slug":"Java","permalink":"https://summerain0.club/tags/Java/"},{"name":"源码","slug":"源码","permalink":"https://summerain0.club/tags/%E6%BA%90%E7%A0%81/"},{"name":"Java Web","slug":"Java-Web","permalink":"https://summerain0.club/tags/Java-Web/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://summerain0.club/tags/SpringBoot/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://summerain0.club/tags/MyBatis/"}]},{"title":"什么？你是学生？还不快来白嫖JetBrains全家桶？","slug":"jetbrains-education-license","date":"2022-09-02T12:28:29.000Z","updated":"2025-01-02T06:10:55.742Z","comments":true,"path":"/2022/09/02/jetbrains-education-license/","permalink":"https://summerain0.club/2022/09/02/jetbrains-education-license/","excerpt":"","text":"前言白嫖原理是JetBrains为学生提供的免费许可证，本篇文章使用学信网进行获取免费的许可证 准备工作学信网获取学籍验证报告 登录学信网，没有账号的请自行注册 学信网登录页面 申请验证报告，完成后结果应和下图差不多一致 申请验证报告 下载验证报告备用 申请许可证 进入免费许可证申请页面 申请教育许可证https://www.jetbrains.com/shop/eform/students 填写相关信息（图片约334k，请耐心等待加载） 教程图片 大约一到三周即可收到邮件（最快次日即可收到） 申请成功通知邮件 注册JetBrains账号（已注册可省略此步骤）注册JetBrains账号https://account.jetbrains.com/login PS：注意使用申请时填写的邮箱，注册后会自动绑定许可证 使用许可证Help -&gt; Register -&gt; 输入账号密码确认即可 IDEA许可证页面IDEA已许可页面 注意事项许可证适用于JetBrains全家桶申请后许可证有效期为一年，可重复申请白嫖可白嫖的软件，建议下载JetBrains ToolBox进行管理AppCodeCLionDataGripdotCoverdotMemorydotTraceGoLandIntelliJ IDEA UltimatePhpStormPyCharmReSharperReSharper C++RiderRubyMineWebStorm","categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"JetBrains","slug":"JetBrains","permalink":"https://summerain0.club/tags/JetBrains/"},{"name":"白嫖","slug":"白嫖","permalink":"https://summerain0.club/tags/%E7%99%BD%E5%AB%96/"},{"name":"许可证","slug":"许可证","permalink":"https://summerain0.club/tags/%E8%AE%B8%E5%8F%AF%E8%AF%81/"},{"name":"教育许可证","slug":"教育许可证","permalink":"https://summerain0.club/tags/%E6%95%99%E8%82%B2%E8%AE%B8%E5%8F%AF%E8%AF%81/"},{"name":"学生","slug":"学生","permalink":"https://summerain0.club/tags/%E5%AD%A6%E7%94%9F/"}]}],"categories":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/"},{"name":"微服务","slug":"教程/微服务","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Hexo","slug":"教程/Hexo","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Hexo/"},{"name":"MySQL","slug":"教程/MySQL","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/MySQL/"},{"name":"Spring","slug":"教程/Spring","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Spring/"},{"name":"JavaScript","slug":"教程/JavaScript","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/JavaScript/"},{"name":"百度推广","slug":"百度推广","permalink":"https://summerain0.club/categories/%E7%99%BE%E5%BA%A6%E6%8E%A8%E5%B9%BF/"},{"name":"Java","slug":"教程/Java","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Java/"},{"name":"笔记","slug":"笔记","permalink":"https://summerain0.club/categories/%E7%AC%94%E8%AE%B0/"},{"name":"git","slug":"笔记/git","permalink":"https://summerain0.club/categories/%E7%AC%94%E8%AE%B0/git/"},{"name":"Material Design","slug":"教程/Material-Design","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Material-Design/"},{"name":"Android","slug":"教程/Android","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Android/"},{"name":"Jetpack Compose","slug":"教程/Jetpack-Compose","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/Jetpack-Compose/"},{"name":"SpringBoot","slug":"教程/SpringBoot","permalink":"https://summerain0.club/categories/%E6%95%99%E7%A8%8B/SpringBoot/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://summerain0.club/tags/%E6%95%99%E7%A8%8B/"},{"name":"微服务","slug":"微服务","permalink":"https://summerain0.club/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Hexo","slug":"Hexo","permalink":"https://summerain0.club/tags/Hexo/"},{"name":"MySQL","slug":"MySQL","permalink":"https://summerain0.club/tags/MySQL/"},{"name":"Java","slug":"Java","permalink":"https://summerain0.club/tags/Java/"},{"name":"源码","slug":"源码","permalink":"https://summerain0.club/tags/%E6%BA%90%E7%A0%81/"},{"name":"Java Web","slug":"Java-Web","permalink":"https://summerain0.club/tags/Java-Web/"},{"name":"SSM","slug":"SSM","permalink":"https://summerain0.club/tags/SSM/"},{"name":"Spring","slug":"Spring","permalink":"https://summerain0.club/tags/Spring/"},{"name":"Web","slug":"Web","permalink":"https://summerain0.club/tags/Web/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://summerain0.club/tags/JavaScript/"},{"name":"飞机大战","slug":"飞机大战","permalink":"https://summerain0.club/tags/%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/"},{"name":"游戏","slug":"游戏","permalink":"https://summerain0.club/tags/%E6%B8%B8%E6%88%8F/"},{"name":"推广","slug":"推广","permalink":"https://summerain0.club/tags/%E6%8E%A8%E5%B9%BF/"},{"name":"百度","slug":"百度","permalink":"https://summerain0.club/tags/%E7%99%BE%E5%BA%A6/"},{"name":"网页","slug":"网页","permalink":"https://summerain0.club/tags/%E7%BD%91%E9%A1%B5/"},{"name":"Steam流","slug":"Steam流","permalink":"https://summerain0.club/tags/Steam%E6%B5%81/"},{"name":"git","slug":"git","permalink":"https://summerain0.club/tags/git/"},{"name":"命令","slug":"命令","permalink":"https://summerain0.club/tags/%E5%91%BD%E4%BB%A4/"},{"name":"Android","slug":"Android","permalink":"https://summerain0.club/tags/Android/"},{"name":"Material Design","slug":"Material-Design","permalink":"https://summerain0.club/tags/Material-Design/"},{"name":"Button","slug":"Button","permalink":"https://summerain0.club/tags/Button/"},{"name":"Jetpack Compose","slug":"Jetpack-Compose","permalink":"https://summerain0.club/tags/Jetpack-Compose/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://summerain0.club/tags/SpringBoot/"},{"name":"MyBatis","slug":"MyBatis","permalink":"https://summerain0.club/tags/MyBatis/"},{"name":"JetBrains","slug":"JetBrains","permalink":"https://summerain0.club/tags/JetBrains/"},{"name":"白嫖","slug":"白嫖","permalink":"https://summerain0.club/tags/%E7%99%BD%E5%AB%96/"},{"name":"许可证","slug":"许可证","permalink":"https://summerain0.club/tags/%E8%AE%B8%E5%8F%AF%E8%AF%81/"},{"name":"教育许可证","slug":"教育许可证","permalink":"https://summerain0.club/tags/%E6%95%99%E8%82%B2%E8%AE%B8%E5%8F%AF%E8%AF%81/"},{"name":"学生","slug":"学生","permalink":"https://summerain0.club/tags/%E5%AD%A6%E7%94%9F/"}]}